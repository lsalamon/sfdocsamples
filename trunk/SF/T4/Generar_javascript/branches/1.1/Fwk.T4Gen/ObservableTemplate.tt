<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ template language="C#" inherits="T4Toolbox.Template" #>
<#+


public class ObservableTemplate : T4Toolbox.Template
{
	public System.Type _type;
	public override string TransformText()
	{#>

	var <#= _type.Name.ToLower() #> = function()
	var self = this;
	self.$type = '<#= string.Format("{0}, {1}", _type.FullName, _type.Assembly.GetName().Name) #>';

	 <#+ foreach (var prop in _type.GetProperties())
		{
      if (prop.PropertyType != typeof(string) && 
		 prop.PropertyType != typeof(byte[]) && 
		 prop.PropertyType.GetInterface("IEnumerable") != null)
                 {#>
				   self.<#= prop.Name #> = ko.observableArray();
				  	<#+   }
                       else
                 { #>
					self.<#= prop.Name #> = ko.observable();
					<#+  }	#>
		<#+ }	#>
    this.Initialize();
	}
<#+        return this.GenerationEnvironment.ToString();
    }
}
#>
