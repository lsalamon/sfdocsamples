//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace pelsoft.FWK_Dsl
{
	/// <summary>
	/// DomainClass NamedElement
	/// </summary>
	[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.NamedElement.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.NamedElement.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[global::System.Diagnostics.DebuggerDisplay("{GetType().Name,nq} (Name = {namePropertyStorage})")]
	[DslModeling::DomainObjectId("706ec50a-d4fe-4d0f-8c3c-10d2884d22ea")]
	public abstract partial class NamedElement : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// NamedElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x706ec50a, 0xd4fe, 0x4d0f, 0x8c, 0x3c, 0x10, 0xd2, 0x88, 0x4d, 0x22, 0xea);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected NamedElement(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x8d039379, 0x2297, 0x4036, 0x83, 0x9e, 0xa5, 0x09, 0x86, 0xa6, 0x8c, 0xd1);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.NamedElement/Name.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.NamedElement/Name.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::ElementName]
		[DslModeling::DomainObjectId("8d039379-2297-4036-839e-a50986a68cd1")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the NamedElement.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<NamedElement, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the NamedElement.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the NamedElement.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(NamedElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(NamedElement element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace pelsoft.FWK_Dsl
{
	/// <summary>
	/// DomainClass ModelRoot
	/// </summary>
	[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.ModelRoot.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.ModelRoot.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("8a674ed6-8e30-4571-bdda-c2b874618a6e")]
	public partial class ModelRoot : NamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModelRoot domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8a674ed6, 0x8e30, 0x4571, 0xbd, 0xda, 0xc2, 0xb8, 0x74, 0x61, 0x8a, 0x6e);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelRoot(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelRoot(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Comments opposite domain role accessor
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Comment> Comments
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<Comment>(this, global::pelsoft.FWK_Dsl.ModelRootHasComments.ModelRootDomainRoleId);
			}
		}
		#endregion
		#region Types opposite domain role accessor
		/// <summary>
		/// Gets a list of Types.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelType> Types
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ModelType>(this, global::pelsoft.FWK_Dsl.ModelRootHasTypes.ModelRootDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::pelsoft.FWK_Dsl.ModelType.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::pelsoft.FWK_Dsl.Comment.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::pelsoft.FWK_Dsl.ModelType sourceModelType1 = sourceElement as global::pelsoft.FWK_Dsl.ModelType;
			if (sourceModelType1 != null)
			{
				// Create link for path ModelRootHasTypes.Types
				this.Types.Add(sourceModelType1);

				return;
			}
				
			global::pelsoft.FWK_Dsl.Comment sourceComment2 = sourceElement as global::pelsoft.FWK_Dsl.Comment;
			if (sourceComment2 != null)
			{
				// Create link for path ModelRootHasComments.Comments
				this.Comments.Add(sourceComment2);

				return;
			}
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::pelsoft.FWK_Dsl.ModelType sourceModelType1 = sourceElement as global::pelsoft.FWK_Dsl.ModelType;
			if (sourceModelType1 != null)
			{
				// Delete link for path ModelRootHasTypes.Types
				
				foreach (DslModeling::ElementLink link in global::pelsoft.FWK_Dsl.ModelRootHasTypes.GetLinks((global::pelsoft.FWK_Dsl.ModelRoot)this, sourceModelType1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::pelsoft.FWK_Dsl.ModelRootHasTypes.ModelRootDomainRoleId, global::pelsoft.FWK_Dsl.ModelRootHasTypes.TypeDomainRoleId);
				}

				return;
			}
				
			global::pelsoft.FWK_Dsl.Comment sourceComment2 = sourceElement as global::pelsoft.FWK_Dsl.Comment;
			if (sourceComment2 != null)
			{
				// Delete link for path ModelRootHasComments.Comments
				
				foreach (DslModeling::ElementLink link in global::pelsoft.FWK_Dsl.ModelRootHasComments.GetLinks((global::pelsoft.FWK_Dsl.ModelRoot)this, sourceComment2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::pelsoft.FWK_Dsl.ModelRootHasComments.ModelRootDomainRoleId, global::pelsoft.FWK_Dsl.ModelRootHasComments.CommentDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace pelsoft.FWK_Dsl
{
	/// <summary>
	/// DomainClass ModelClass
	/// </summary>
	[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.ModelClass.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.ModelClass.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("30fa867e-76f3-4723-881b-7282ff8e2816")]
	public partial class ModelClass : ModelType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModelClass domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x30fa867e, 0x76f3, 0x4723, 0x88, 0x1b, 0x72, 0x82, 0xff, 0x8e, 0x28, 0x16);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelClass(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelClass(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Kind domain property code
		
		/// <summary>
		/// Kind domain property Id.
		/// </summary>
		public static readonly global::System.Guid KindDomainPropertyId = new global::System.Guid(0x908a61fe, 0x5cfa, 0x4f8c, 0x9c, 0x0e, 0x6b, 0x90, 0x1b, 0xb8, 0xf0, 0x85);
		
		/// <summary>
		/// Storage for Kind
		/// </summary>
		private global::System.String kindPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Kind domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.ModelClass/Kind.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.ModelClass/Kind.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("908a61fe-5cfa-4f8c-9c0e-6b901bb8f085")]
		public global::System.String Kind
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return kindPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				KindPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.Kind domain property.
		/// </summary>
		internal sealed partial class KindPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelClass, global::System.String>
		{
			private KindPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.Kind domain property value handler.
			/// </summary>
			public static readonly KindPropertyHandler Instance = new KindPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.Kind domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return KindDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.kindPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelClass element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.kindPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region IsAbstract domain property code
		
		/// <summary>
		/// IsAbstract domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsAbstractDomainPropertyId = new global::System.Guid(0xd1d8d580, 0x2528, 0x4e7a, 0x90, 0x40, 0xc4, 0x81, 0xad, 0x3d, 0xee, 0xe8);
		
		/// <summary>
		/// Storage for IsAbstract
		/// </summary>
		private InheritanceModifier isAbstractPropertyStorage = InheritanceModifier.None;
		
		/// <summary>
		/// Gets or sets the value of IsAbstract domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.ModelClass/IsAbstract.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.ModelClass/IsAbstract.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(InheritanceModifier.None)]
		[DslModeling::DomainObjectId("d1d8d580-2528-4e7a-9040-c481ad3deee8")]
		public InheritanceModifier IsAbstract
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isAbstractPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsAbstractPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelClass.IsAbstract domain property.
		/// </summary>
		internal sealed partial class IsAbstractPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelClass, InheritanceModifier>
		{
			private IsAbstractPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelClass.IsAbstract domain property value handler.
			/// </summary>
			public static readonly IsAbstractPropertyHandler Instance = new IsAbstractPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelClass.IsAbstract domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsAbstractDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed InheritanceModifier GetValue(ModelClass element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isAbstractPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelClass element, InheritanceModifier newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				InheritanceModifier oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isAbstractPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Targets opposite domain role accessor
		/// <summary>
		/// Gets a list of Targets.
		/// </summary>
		public virtual DslModeling::ReadOnlyLinkedElementCollection<ModelClass> Targets
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::ReadOnlyLinkedElementCollection<ModelClass>(this, global::pelsoft.FWK_Dsl.Association.SourceDomainRoleId);
			}
		}
		#endregion
		#region Sources opposite domain role accessor
		/// <summary>
		/// Gets a list of Sources.
		/// </summary>
		public virtual DslModeling::ReadOnlyLinkedElementCollection<ModelClass> Sources
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::ReadOnlyLinkedElementCollection<ModelClass>(this, global::pelsoft.FWK_Dsl.Association.TargetDomainRoleId);
			}
		}
		#endregion
		#region UnidirectionalTargets opposite domain role accessor
		/// <summary>
		/// Gets a list of UnidirectionalTargets.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelClass> UnidirectionalTargets
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ModelClass>(this, global::pelsoft.FWK_Dsl.UnidirectionalAssociation.UnidirectionalSourceDomainRoleId);
			}
		}
		#endregion
		#region UnidirectionalSources opposite domain role accessor
		/// <summary>
		/// Gets a list of UnidirectionalSources.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelClass> UnidirectionalSources
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ModelClass>(this, global::pelsoft.FWK_Dsl.UnidirectionalAssociation.UnidirectionalTargetDomainRoleId);
			}
		}
		#endregion
		#region Attributes opposite domain role accessor
		/// <summary>
		/// Gets a list of Attributes.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelAttribute> Attributes
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ModelAttribute>(this, global::pelsoft.FWK_Dsl.ClassHasAttributes.ModelClassDomainRoleId);
			}
		}
		#endregion
		#region Operations opposite domain role accessor
		/// <summary>
		/// Gets a list of Operations.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ClassOperation> Operations
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ClassOperation>(this, global::pelsoft.FWK_Dsl.ClassHasOperations.ModelClassDomainRoleId);
			}
		}
		#endregion
		#region Subclasses opposite domain role accessor
		/// <summary>
		/// Gets a list of Subclasses.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelClass> Subclasses
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ModelClass>(this, global::pelsoft.FWK_Dsl.Generalization.SuperclassDomainRoleId);
			}
		}
		#endregion
		#region Superclass opposite domain role accessor
		/// <summary>
		/// Gets or sets Superclass.
		/// </summary>
		public virtual ModelClass Superclass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::pelsoft.FWK_Dsl.Generalization.SubclassDomainRoleId) as ModelClass;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::pelsoft.FWK_Dsl.Generalization.SubclassDomainRoleId, value);
			}
		}
		#endregion
		#region BidirectionalTargets opposite domain role accessor
		/// <summary>
		/// Gets a list of BidirectionalTargets.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelClass> BidirectionalTargets
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ModelClass>(this, global::pelsoft.FWK_Dsl.BidirectionalAssociation.BidirectionalSourceDomainRoleId);
			}
		}
		#endregion
		#region BidirectionalSources opposite domain role accessor
		/// <summary>
		/// Gets a list of BidirectionalSources.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelClass> BidirectionalSources
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ModelClass>(this, global::pelsoft.FWK_Dsl.BidirectionalAssociation.BidirectionalTargetDomainRoleId);
			}
		}
		#endregion
		#region MultipleAssociations opposite domain role accessor
		/// <summary>
		/// Gets a list of MultipleAssociations.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<MultipleAssociation> MultipleAssociations
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<MultipleAssociation>(this, global::pelsoft.FWK_Dsl.MultipleAssociationRole.TypeDomainRoleId);
			}
		}
		#endregion
		#region MultipleAssociation opposite domain role accessor
		/// <summary>
		/// Gets or sets MultipleAssociation.
		/// </summary>
		public virtual MultipleAssociation MultipleAssociation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::pelsoft.FWK_Dsl.AssociationClassRelationship.AssociationClassDomainRoleId) as MultipleAssociation;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::pelsoft.FWK_Dsl.AssociationClassRelationship.AssociationClassDomainRoleId, value);
			}
		}
		#endregion
		#region AggregationTargets opposite domain role accessor
		/// <summary>
		/// Gets a list of AggregationTargets.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelClass> AggregationTargets
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ModelClass>(this, global::pelsoft.FWK_Dsl.Aggregation.AggregationSourceDomainRoleId);
			}
		}
		#endregion
		#region AggregationSources opposite domain role accessor
		/// <summary>
		/// Gets a list of AggregationSources.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelClass> AggregationSources
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ModelClass>(this, global::pelsoft.FWK_Dsl.Aggregation.AggregationTargetDomainRoleId);
			}
		}
		#endregion
		#region CompositionTargets opposite domain role accessor
		/// <summary>
		/// Gets a list of CompositionTargets.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelClass> CompositionTargets
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ModelClass>(this, global::pelsoft.FWK_Dsl.Composition.CompositionSourceDomainRoleId);
			}
		}
		#endregion
		#region CompositionSources opposite domain role accessor
		/// <summary>
		/// Gets a list of CompositionSources.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelClass> CompositionSources
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ModelClass>(this, global::pelsoft.FWK_Dsl.Composition.CompositionTargetDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::pelsoft.FWK_Dsl.ClassOperation.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::pelsoft.FWK_Dsl.ModelAttribute.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::pelsoft.FWK_Dsl.ClassOperation sourceClassOperation1 = sourceElement as global::pelsoft.FWK_Dsl.ClassOperation;
			if (sourceClassOperation1 != null)
			{
				// Create link for path ClassHasOperations.Operations
				this.Operations.Add(sourceClassOperation1);

				return;
			}
				
			global::pelsoft.FWK_Dsl.ModelAttribute sourceModelAttribute2 = sourceElement as global::pelsoft.FWK_Dsl.ModelAttribute;
			if (sourceModelAttribute2 != null)
			{
				// Create link for path ClassHasAttributes.Attributes
				this.Attributes.Add(sourceModelAttribute2);

				return;
			}
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::pelsoft.FWK_Dsl.ClassOperation sourceClassOperation1 = sourceElement as global::pelsoft.FWK_Dsl.ClassOperation;
			if (sourceClassOperation1 != null)
			{
				// Delete link for path ClassHasOperations.Operations
				
				foreach (DslModeling::ElementLink link in global::pelsoft.FWK_Dsl.ClassHasOperations.GetLinks((global::pelsoft.FWK_Dsl.ModelClass)this, sourceClassOperation1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::pelsoft.FWK_Dsl.ClassHasOperations.ModelClassDomainRoleId, global::pelsoft.FWK_Dsl.ClassHasOperations.OperationDomainRoleId);
				}

				return;
			}
				
			global::pelsoft.FWK_Dsl.ModelAttribute sourceModelAttribute2 = sourceElement as global::pelsoft.FWK_Dsl.ModelAttribute;
			if (sourceModelAttribute2 != null)
			{
				// Delete link for path ClassHasAttributes.Attributes
				
				foreach (DslModeling::ElementLink link in global::pelsoft.FWK_Dsl.ClassHasAttributes.GetLinks((global::pelsoft.FWK_Dsl.ModelClass)this, sourceModelAttribute2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::pelsoft.FWK_Dsl.ClassHasAttributes.ModelClassDomainRoleId, global::pelsoft.FWK_Dsl.ClassHasAttributes.AttributeDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace pelsoft.FWK_Dsl
{
	/// <summary>
	/// DomainClass ModelAttribute
	/// An attribute of a class.
	/// </summary>
	[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.ModelAttribute.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.ModelAttribute.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("83694d4d-3704-4ccb-ad82-8fdb7bb233bc")]
	public partial class ModelAttribute : ClassModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModelAttribute domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x83694d4d, 0x3704, 0x4ccb, 0xad, 0x82, 0x8f, 0xdb, 0x7b, 0xb2, 0x33, 0xbc);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelAttribute(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelAttribute(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Type domain property code
		
		/// <summary>
		/// Type domain property Id.
		/// </summary>
		public static readonly global::System.Guid TypeDomainPropertyId = new global::System.Guid(0x15ebfef4, 0x2ad1, 0x4149, 0x98, 0xc6, 0xa7, 0x48, 0x74, 0xa4, 0xf2, 0xf2);
		
		/// <summary>
		/// Storage for Type
		/// </summary>
		private global::System.String typePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Type domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.ModelAttribute/Type.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.ModelAttribute/Type.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("15ebfef4-2ad1-4149-98c6-a74874a4f2f2")]
		public global::System.String Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return typePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TypePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.Type domain property.
		/// </summary>
		internal sealed partial class TypePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, global::System.String>
		{
			private TypePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.Type domain property value handler.
			/// </summary>
			public static readonly TypePropertyHandler Instance = new TypePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.Type domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TypeDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.typePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.typePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region InitialValue domain property code
		
		/// <summary>
		/// InitialValue domain property Id.
		/// </summary>
		public static readonly global::System.Guid InitialValueDomainPropertyId = new global::System.Guid(0xd988860f, 0x603e, 0x4735, 0xa0, 0x13, 0x55, 0xb5, 0x2f, 0xe9, 0xa4, 0x20);
		
		/// <summary>
		/// Storage for InitialValue
		/// </summary>
		private global::System.String initialValuePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of InitialValue domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.ModelAttribute/InitialValue.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.ModelAttribute/InitialValue.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("d988860f-603e-4735-a013-55b52fe9a420")]
		public global::System.String InitialValue
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return initialValuePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				InitialValuePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.InitialValue domain property.
		/// </summary>
		internal sealed partial class InitialValuePropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, global::System.String>
		{
			private InitialValuePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.InitialValue domain property value handler.
			/// </summary>
			public static readonly InitialValuePropertyHandler Instance = new InitialValuePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.InitialValue domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return InitialValueDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.initialValuePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.initialValuePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Multiplicity domain property code
		
		/// <summary>
		/// Multiplicity domain property Id.
		/// </summary>
		public static readonly global::System.Guid MultiplicityDomainPropertyId = new global::System.Guid(0xaec46897, 0x6c9e, 0x48ba, 0x9a, 0xe9, 0x74, 0xf3, 0xfc, 0x69, 0xdc, 0xb1);
		
		/// <summary>
		/// Storage for Multiplicity
		/// </summary>
		private global::System.String multiplicityPropertyStorage = "1";
		
		/// <summary>
		/// Gets or sets the value of Multiplicity domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.ModelAttribute/Multiplicity.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.ModelAttribute/Multiplicity.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("1")]
		[DslModeling::DomainObjectId("aec46897-6c9e-48ba-9ae9-74f3fc69dcb1")]
		public global::System.String Multiplicity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return multiplicityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MultiplicityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ModelAttribute.Multiplicity domain property.
		/// </summary>
		internal sealed partial class MultiplicityPropertyHandler : DslModeling::DomainPropertyValueHandler<ModelAttribute, global::System.String>
		{
			private MultiplicityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ModelAttribute.Multiplicity domain property value handler.
			/// </summary>
			public static readonly MultiplicityPropertyHandler Instance = new MultiplicityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ModelAttribute.Multiplicity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MultiplicityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ModelAttribute element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.multiplicityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ModelAttribute element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.multiplicityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ModelClass opposite domain role accessor
		/// <summary>
		/// Gets or sets ModelClass.
		/// </summary>
		public virtual ModelClass ModelClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::pelsoft.FWK_Dsl.ClassHasAttributes.AttributeDomainRoleId) as ModelClass;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::pelsoft.FWK_Dsl.ClassHasAttributes.AttributeDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace pelsoft.FWK_Dsl
{
	/// <summary>
	/// DomainClass Comment
	/// </summary>
	[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.Comment.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.Comment.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("3ec3b4ae-56a2-4809-af0c-e13be31e63e7")]
	public partial class Comment : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Comment domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3ec3b4ae, 0x56a2, 0x4809, 0xaf, 0x0c, 0xe1, 0x3b, 0xe3, 0x1e, 0x63, 0xe7);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Comment(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Comment(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Text domain property code
		
		/// <summary>
		/// Text domain property Id.
		/// </summary>
		public static readonly global::System.Guid TextDomainPropertyId = new global::System.Guid(0x33f9f791, 0x8c50, 0x48dc, 0xa0, 0x62, 0xdb, 0x17, 0x47, 0xfc, 0xff, 0xff);
		
		/// <summary>
		/// Storage for Text
		/// </summary>
		private global::System.String textPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Text domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.Comment/Text.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.Comment/Text.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("33f9f791-8c50-48dc-a062-db1747fcffff")]
		public global::System.String Text
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return textPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TextPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Comment.Text domain property.
		/// </summary>
		internal sealed partial class TextPropertyHandler : DslModeling::DomainPropertyValueHandler<Comment, global::System.String>
		{
			private TextPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Comment.Text domain property value handler.
			/// </summary>
			public static readonly TextPropertyHandler Instance = new TextPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Comment.Text domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TextDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Comment element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.textPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Comment element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.textPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ModelRoot opposite domain role accessor
		/// <summary>
		/// Gets or sets ModelRoot.
		/// </summary>
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::pelsoft.FWK_Dsl.ModelRootHasComments.CommentDomainRoleId) as ModelRoot;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::pelsoft.FWK_Dsl.ModelRootHasComments.CommentDomainRoleId, value);
			}
		}
		#endregion
		#region Subjects opposite domain role accessor
		/// <summary>
		/// Gets a list of Subjects.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelType> Subjects
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ModelType>(this, global::pelsoft.FWK_Dsl.CommentReferencesSubjects.CommentDomainRoleId);
			}
		}
		#endregion
	}
}
namespace pelsoft.FWK_Dsl
{
	/// <summary>
	/// DomainClass Operation
	/// An Operation of a Class.
	/// </summary>
	[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.Operation.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.Operation.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("7e4bbbc1-fdaa-4873-b5d8-943137410cca")]
	public abstract partial class Operation : ClassModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Operation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x7e4bbbc1, 0xfdaa, 0x4873, 0xb5, 0xd8, 0x94, 0x31, 0x37, 0x41, 0x0c, 0xca);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected Operation(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Signature domain property code
		
		/// <summary>
		/// Signature domain property Id.
		/// </summary>
		public static readonly global::System.Guid SignatureDomainPropertyId = new global::System.Guid(0x2c292f88, 0x6476, 0x485d, 0xb9, 0x61, 0xcd, 0x63, 0xc3, 0xc4, 0x63, 0xa3);
		
		/// <summary>
		/// Storage for Signature
		/// </summary>
		private global::System.String signaturePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Signature domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.Operation/Signature.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.Operation/Signature.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("2c292f88-6476-485d-b961-cd63c3c463a3")]
		public global::System.String Signature
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return signaturePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SignaturePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Operation.Signature domain property.
		/// </summary>
		internal sealed partial class SignaturePropertyHandler : DslModeling::DomainPropertyValueHandler<Operation, global::System.String>
		{
			private SignaturePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Operation.Signature domain property value handler.
			/// </summary>
			public static readonly SignaturePropertyHandler Instance = new SignaturePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Operation.Signature domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SignatureDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Operation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.signaturePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Operation element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.signaturePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Concurrency domain property code
		
		/// <summary>
		/// Concurrency domain property Id.
		/// </summary>
		public static readonly global::System.Guid ConcurrencyDomainPropertyId = new global::System.Guid(0xbc08d1e2, 0xb650, 0x4974, 0xb5, 0x9f, 0x3f, 0x73, 0xf9, 0xf5, 0x8a, 0x3b);
		
		/// <summary>
		/// Storage for Concurrency
		/// </summary>
		private OperationConcurrency concurrencyPropertyStorage = OperationConcurrency.Sequential;
		
		/// <summary>
		/// Gets or sets the value of Concurrency domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.Operation/Concurrency.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.Operation/Concurrency.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(OperationConcurrency.Sequential)]
		[DslModeling::DomainObjectId("bc08d1e2-b650-4974-b59f-3f73f9f58a3b")]
		public OperationConcurrency Concurrency
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return concurrencyPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				ConcurrencyPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Operation.Concurrency domain property.
		/// </summary>
		internal sealed partial class ConcurrencyPropertyHandler : DslModeling::DomainPropertyValueHandler<Operation, OperationConcurrency>
		{
			private ConcurrencyPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Operation.Concurrency domain property value handler.
			/// </summary>
			public static readonly ConcurrencyPropertyHandler Instance = new ConcurrencyPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Operation.Concurrency domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return ConcurrencyDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed OperationConcurrency GetValue(Operation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.concurrencyPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Operation element, OperationConcurrency newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				OperationConcurrency oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.concurrencyPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Precondition domain property code
		
		/// <summary>
		/// Precondition domain property Id.
		/// </summary>
		public static readonly global::System.Guid PreconditionDomainPropertyId = new global::System.Guid(0xb40f919e, 0x05ea, 0x4918, 0xa9, 0x6f, 0xd0, 0xa5, 0x79, 0xea, 0x00, 0x7d);
		
		/// <summary>
		/// Storage for Precondition
		/// </summary>
		private global::System.String preconditionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Precondition domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.Operation/Precondition.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.Operation/Precondition.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("b40f919e-05ea-4918-a96f-d0a579ea007d")]
		public global::System.String Precondition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return preconditionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PreconditionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Operation.Precondition domain property.
		/// </summary>
		internal sealed partial class PreconditionPropertyHandler : DslModeling::DomainPropertyValueHandler<Operation, global::System.String>
		{
			private PreconditionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Operation.Precondition domain property value handler.
			/// </summary>
			public static readonly PreconditionPropertyHandler Instance = new PreconditionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Operation.Precondition domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PreconditionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Operation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.preconditionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Operation element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.preconditionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Postcondition domain property code
		
		/// <summary>
		/// Postcondition domain property Id.
		/// </summary>
		public static readonly global::System.Guid PostconditionDomainPropertyId = new global::System.Guid(0x2b7bc2f9, 0x6e77, 0x435a, 0xb6, 0x94, 0x1d, 0x6d, 0xa1, 0x17, 0xbf, 0xd2);
		
		/// <summary>
		/// Storage for Postcondition
		/// </summary>
		private global::System.String postconditionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Postcondition domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.Operation/Postcondition.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.Operation/Postcondition.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("2b7bc2f9-6e77-435a-b694-1d6da117bfd2")]
		public global::System.String Postcondition
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return postconditionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				PostconditionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Operation.Postcondition domain property.
		/// </summary>
		internal sealed partial class PostconditionPropertyHandler : DslModeling::DomainPropertyValueHandler<Operation, global::System.String>
		{
			private PostconditionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Operation.Postcondition domain property value handler.
			/// </summary>
			public static readonly PostconditionPropertyHandler Instance = new PostconditionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Operation.Postcondition domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return PostconditionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Operation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.postconditionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Operation element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.postconditionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
namespace pelsoft.FWK_Dsl
{
	/// <summary>
	/// DomainClass ClassOperation
	/// </summary>
	[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.ClassOperation.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.ClassOperation.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("c7c3a971-2812-4508-bf25-b6b50708d66b")]
	public partial class ClassOperation : Operation
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ClassOperation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc7c3a971, 0x2812, 0x4508, 0xbf, 0x25, 0xb6, 0xb5, 0x07, 0x08, 0xd6, 0x6b);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ClassOperation(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ClassOperation(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region IsAbstract domain property code
		
		/// <summary>
		/// IsAbstract domain property Id.
		/// </summary>
		public static readonly global::System.Guid IsAbstractDomainPropertyId = new global::System.Guid(0xd5be4ae1, 0xd611, 0x49e9, 0x83, 0xe9, 0x12, 0x79, 0xdb, 0x69, 0x7f, 0x18);
		
		/// <summary>
		/// Storage for IsAbstract
		/// </summary>
		private global::System.Boolean isAbstractPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of IsAbstract domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.ClassOperation/IsAbstract.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.ClassOperation/IsAbstract.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("d5be4ae1-d611-49e9-83e9-1279db697f18")]
		public global::System.Boolean IsAbstract
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return isAbstractPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				IsAbstractPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ClassOperation.IsAbstract domain property.
		/// </summary>
		internal sealed partial class IsAbstractPropertyHandler : DslModeling::DomainPropertyValueHandler<ClassOperation, global::System.Boolean>
		{
			private IsAbstractPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ClassOperation.IsAbstract domain property value handler.
			/// </summary>
			public static readonly IsAbstractPropertyHandler Instance = new IsAbstractPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ClassOperation.IsAbstract domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return IsAbstractDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Boolean GetValue(ClassOperation element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.isAbstractPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ClassOperation element, global::System.Boolean newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Boolean oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.isAbstractPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region ModelClass opposite domain role accessor
		/// <summary>
		/// Gets or sets ModelClass.
		/// </summary>
		public virtual ModelClass ModelClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::pelsoft.FWK_Dsl.ClassHasOperations.OperationDomainRoleId) as ModelClass;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::pelsoft.FWK_Dsl.ClassHasOperations.OperationDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace pelsoft.FWK_Dsl
{
	/// <summary>
	/// DomainClass ModelInterface
	/// </summary>
	[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.ModelInterface.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.ModelInterface.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("41f946c3-46db-4a2c-a9b2-31088f8e0da7")]
	public partial class ModelInterface : ModelType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModelInterface domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x41f946c3, 0x46db, 0x4a2c, 0xa9, 0xb2, 0x31, 0x08, 0x8f, 0x8e, 0x0d, 0xa7);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelInterface(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public ModelInterface(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Operations opposite domain role accessor
		/// <summary>
		/// Gets a list of Operations.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<InterfaceOperation> Operations
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<InterfaceOperation>(this, global::pelsoft.FWK_Dsl.InterfaceHasOperation.InterfaceDomainRoleId);
			}
		}
		#endregion
		#region Implementors opposite domain role accessor
		/// <summary>
		/// Gets a list of Implementors.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelType> Implementors
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ModelType>(this, global::pelsoft.FWK_Dsl.Implementation.ImplementDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::pelsoft.FWK_Dsl.InterfaceOperation.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::pelsoft.FWK_Dsl.InterfaceOperation sourceInterfaceOperation1 = sourceElement as global::pelsoft.FWK_Dsl.InterfaceOperation;
			if (sourceInterfaceOperation1 != null)
			{
				// Create link for path InterfaceHasOperation.Operations
				this.Operations.Add(sourceInterfaceOperation1);

				return;
			}
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::pelsoft.FWK_Dsl.InterfaceOperation sourceInterfaceOperation1 = sourceElement as global::pelsoft.FWK_Dsl.InterfaceOperation;
			if (sourceInterfaceOperation1 != null)
			{
				// Delete link for path InterfaceHasOperation.Operations
				
				foreach (DslModeling::ElementLink link in global::pelsoft.FWK_Dsl.InterfaceHasOperation.GetLinks((global::pelsoft.FWK_Dsl.ModelInterface)this, sourceInterfaceOperation1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::pelsoft.FWK_Dsl.InterfaceHasOperation.InterfaceDomainRoleId, global::pelsoft.FWK_Dsl.InterfaceHasOperation.OperationDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace pelsoft.FWK_Dsl
{
	/// <summary>
	/// DomainClass InterfaceOperation
	/// </summary>
	[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.InterfaceOperation.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.InterfaceOperation.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("de5de78b-5020-45ab-b536-b759cb34ea57")]
	public partial class InterfaceOperation : Operation
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// InterfaceOperation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xde5de78b, 0x5020, 0x45ab, 0xb5, 0x36, 0xb7, 0x59, 0xcb, 0x34, 0xea, 0x57);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InterfaceOperation(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public InterfaceOperation(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Interface opposite domain role accessor
		/// <summary>
		/// Gets or sets Interface.
		/// </summary>
		public virtual ModelInterface Interface
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::pelsoft.FWK_Dsl.InterfaceHasOperation.OperationDomainRoleId) as ModelInterface;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::pelsoft.FWK_Dsl.InterfaceHasOperation.OperationDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace pelsoft.FWK_Dsl
{
	/// <summary>
	/// DomainClass MultipleAssociation
	/// </summary>
	[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.MultipleAssociation.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.MultipleAssociation.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("c13ddb39-609a-41a1-8090-9782b3238050")]
	public partial class MultipleAssociation : ModelType
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// MultipleAssociation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc13ddb39, 0x609a, 0x41a1, 0x80, 0x90, 0x97, 0x82, 0xb3, 0x23, 0x80, 0x50);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MultipleAssociation(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartition : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MultipleAssociation(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Types opposite domain role accessor
		/// <summary>
		/// Gets a list of Types.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelClass> Types
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ModelClass>(this, global::pelsoft.FWK_Dsl.MultipleAssociationRole.MultipleAssociationDomainRoleId);
			}
		}
		#endregion
		#region AssociationClass opposite domain role accessor
		/// <summary>
		/// Gets or sets AssociationClass.
		/// </summary>
		public virtual ModelClass AssociationClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::pelsoft.FWK_Dsl.AssociationClassRelationship.MultipleAssociationDomainRoleId) as ModelClass;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::pelsoft.FWK_Dsl.AssociationClassRelationship.MultipleAssociationDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace pelsoft.FWK_Dsl
{
	/// <summary>
	/// DomainClass ModelType
	/// </summary>
	[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.ModelType.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.ModelType.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("197ad9f2-ab32-44d5-ae8f-7c99aa604651")]
	public abstract partial class ModelType : ClassModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ModelType domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x197ad9f2, 0xab32, 0x44d5, 0xae, 0x8f, 0x7c, 0x99, 0xaa, 0x60, 0x46, 0x51);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ModelType(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region ModelRoot opposite domain role accessor
		/// <summary>
		/// Gets or sets ModelRoot.
		/// </summary>
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::pelsoft.FWK_Dsl.ModelRootHasTypes.TypeDomainRoleId) as ModelRoot;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::pelsoft.FWK_Dsl.ModelRootHasTypes.TypeDomainRoleId, value);
			}
		}
		#endregion
		#region Comments opposite domain role accessor
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Comment> Comments
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<Comment>(this, global::pelsoft.FWK_Dsl.CommentReferencesSubjects.SubjectDomainRoleId);
			}
		}
		#endregion
		#region Implements opposite domain role accessor
		/// <summary>
		/// Gets a list of Implements.
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<ModelInterface> Implements
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return new DslModeling::LinkedElementCollection<ModelInterface>(this, global::pelsoft.FWK_Dsl.Implementation.ImplementorDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::pelsoft.FWK_Dsl.Comment.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::pelsoft.FWK_Dsl.Comment sourceComment1 = sourceElement as global::pelsoft.FWK_Dsl.Comment;
			if (sourceComment1 != null)
			{
				// Create link for path CommentReferencesSubjects.Comments
				this.Comments.Add(sourceComment1);

				// Create link for path ModelRootHasTypes.ModelRoot/!ModelRoot/ModelRootHasComments.Comments
						// Segments 0 and 1
						global::pelsoft.FWK_Dsl.ModelRoot commentHost1 = this.ModelRoot;
						if ( commentHost1 == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'ModelRootHasTypes.ModelRoot/!ModelRoot/ModelRootHasComments.Comments'.");
				commentHost1.Comments.Add(sourceComment1);

				return;
			}
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::pelsoft.FWK_Dsl.Comment sourceComment1 = sourceElement as global::pelsoft.FWK_Dsl.Comment;
			if (sourceComment1 != null)
			{
				// Delete link for path CommentReferencesSubjects.Comments
				
				foreach (DslModeling::ElementLink link in global::pelsoft.FWK_Dsl.CommentReferencesSubjects.GetLinks(sourceComment1, (global::pelsoft.FWK_Dsl.ModelType)this))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::pelsoft.FWK_Dsl.CommentReferencesSubjects.SubjectDomainRoleId, global::pelsoft.FWK_Dsl.CommentReferencesSubjects.CommentDomainRoleId);
				}

				// Delete link for path ModelRootHasTypes.ModelRoot/!ModelRoot/ModelRootHasComments.Comments
					// Segments 0 and 1
					global::pelsoft.FWK_Dsl.ModelRoot commentHost1 = this.ModelRoot;
					if ( commentHost1 == null ) throw new global::System.InvalidOperationException("Null encountered while traversing path 'ModelRootHasTypes.ModelRoot/!ModelRoot/ModelRootHasComments.Comments'.");
				
				foreach (DslModeling::ElementLink link in global::pelsoft.FWK_Dsl.ModelRootHasComments.GetLinks((global::pelsoft.FWK_Dsl.ModelRoot)commentHost1, sourceComment1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::pelsoft.FWK_Dsl.ModelRootHasComments.ModelRootDomainRoleId, global::pelsoft.FWK_Dsl.ModelRootHasComments.CommentDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace pelsoft.FWK_Dsl
{
	/// <summary>
	/// DomainClass ClassModelElement
	/// Element with a Description
	/// </summary>
	[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.ClassModelElement.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.ClassModelElement.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("c62243d1-f9c6-499e-9580-163cf8726784")]
	public abstract partial class ClassModelElement : NamedElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// ClassModelElement domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc62243d1, 0xf9c6, 0x499e, 0x95, 0x80, 0x16, 0x3c, 0xf8, 0x72, 0x67, 0x84);
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		protected ClassModelElement(DslModeling::Partition partition, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Description domain property code
		
		/// <summary>
		/// Description domain property Id.
		/// </summary>
		public static readonly global::System.Guid DescriptionDomainPropertyId = new global::System.Guid(0x49eb230b, 0xd987, 0x4906, 0xa7, 0x3b, 0x9c, 0x7f, 0xfc, 0x7e, 0x36, 0x7e);
		
		/// <summary>
		/// Storage for Description
		/// </summary>
		private global::System.String descriptionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Description domain property.
		/// This is a Description.
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.ClassModelElement/Description.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.ClassModelElement/Description.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("49eb230b-d987-4906-a73b-9c7ffc7e367e")]
		public global::System.String Description
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return descriptionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DescriptionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the ClassModelElement.Description domain property.
		/// </summary>
		internal sealed partial class DescriptionPropertyHandler : DslModeling::DomainPropertyValueHandler<ClassModelElement, global::System.String>
		{
			private DescriptionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the ClassModelElement.Description domain property value handler.
			/// </summary>
			public static readonly DescriptionPropertyHandler Instance = new DescriptionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the ClassModelElement.Description domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DescriptionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(ClassModelElement element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.descriptionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(ClassModelElement element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.descriptionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
	}
}
