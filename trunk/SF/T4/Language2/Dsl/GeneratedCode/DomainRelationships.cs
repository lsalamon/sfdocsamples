//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace pelsoft.FWK_Dsl
{
	/// <summary>
	/// DomainRelationship Association
	/// Associations between Classes.
	/// </summary>
	[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.Association.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.Association.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("b28e302c-f25e-4b8f-8fc4-e28da6863270")]
	public abstract partial class Association : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Association domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb28e302c, 0xf25e, 0x4b8f, 0x8f, 0xc4, 0xe2, 0x8d, 0xa6, 0x86, 0x32, 0x70);
	
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="partition">The Partition instance containing this ElementLink</param>
		/// <param name="roleAssignments">A set of role assignments for roleplayer initialization</param>
		/// <param name="propertyAssignments">A set of attribute assignments for attribute initialization</param>
		protected Association(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Source domain role code
		
		/// <summary>
		/// Source domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceDomainRoleId = new global::System.Guid(0x23f03bd0, 0xb818, 0x4d23, 0xbf, 0x6d, 0x39, 0x18, 0x2b, 0xb3, 0xac, 0xa5);
		
		/// <summary>
		/// DomainRole Source
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.Association/Source.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.Association/Source.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Targets", PropertyDisplayNameKey="pelsoft.FWK_Dsl.Association/Source.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("23f03bd0-b818-4d23-bf6d-39182bb3aca5")]
		public abstract ModelClass Source
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access Sources of a ModelClass
		/// <summary>
		/// Gets a list of Sources.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<ModelClass> GetSources(ModelClass element)
		{
			return new DslModeling::ReadOnlyLinkedElementCollection<ModelClass>(element, TargetDomainRoleId);
		}
		#endregion
		#region Target domain role code
		
		/// <summary>
		/// Target domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetDomainRoleId = new global::System.Guid(0xe1a7c4d8, 0x469d, 0x461f, 0x87, 0xc9, 0x75, 0xd6, 0x1e, 0x99, 0x0b, 0x1f);
		
		/// <summary>
		/// DomainRole Target
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.Association/Target.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.Association/Target.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Sources", PropertyDisplayNameKey="pelsoft.FWK_Dsl.Association/Target.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e1a7c4d8-469d-461f-87c9-75d61e990b1f")]
		public abstract ModelClass Target
		{
			get;
			set;
		}
				
		#endregion
		#region Static methods to access Targets of a ModelClass
		/// <summary>
		/// Gets a list of Targets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::ReadOnlyLinkedElementCollection<ModelClass> GetTargets(ModelClass element)
		{
			return new DslModeling::ReadOnlyLinkedElementCollection<ModelClass>(element, SourceDomainRoleId);
		}
		#endregion
		#region SourceMultiplicity domain property code
		
		/// <summary>
		/// SourceMultiplicity domain property Id.
		/// </summary>
		public static readonly global::System.Guid SourceMultiplicityDomainPropertyId = new global::System.Guid(0xf0628c8e, 0xdd1d, 0x465f, 0xb5, 0xd0, 0x62, 0x08, 0xe3, 0x83, 0xda, 0xd7);
		
		/// <summary>
		/// Storage for SourceMultiplicity
		/// </summary>
		private Multiplicity sourceMultiplicityPropertyStorage = Multiplicity.ZeroMany;
		
		/// <summary>
		/// Gets or sets the value of SourceMultiplicity domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.Association/SourceMultiplicity.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.Association/SourceMultiplicity.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f0628c8e-dd1d-465f-b5d0-6208e383dad7")]
		public Multiplicity SourceMultiplicity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sourceMultiplicityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SourceMultiplicityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.SourceMultiplicity domain property.
		/// </summary>
		internal sealed partial class SourceMultiplicityPropertyHandler : DslModeling::DomainPropertyValueHandler<Association, Multiplicity>
		{
			private SourceMultiplicityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.SourceMultiplicity domain property value handler.
			/// </summary>
			public static readonly SourceMultiplicityPropertyHandler Instance = new SourceMultiplicityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.SourceMultiplicity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SourceMultiplicityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed Multiplicity GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.sourceMultiplicityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, Multiplicity newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				Multiplicity oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sourceMultiplicityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SourceRoleName domain property code
		
		/// <summary>
		/// SourceRoleName domain property Id.
		/// </summary>
		public static readonly global::System.Guid SourceRoleNameDomainPropertyId = new global::System.Guid(0x34e03f66, 0x5ad3, 0x4807, 0xa1, 0x4c, 0xb9, 0xa6, 0x7b, 0x0c, 0xee, 0x01);
		
		/// <summary>
		/// Storage for SourceRoleName
		/// </summary>
		private global::System.String sourceRoleNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of SourceRoleName domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.Association/SourceRoleName.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.Association/SourceRoleName.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("34e03f66-5ad3-4807-a14c-b9a67b0cee01")]
		public global::System.String SourceRoleName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sourceRoleNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SourceRoleNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.SourceRoleName domain property.
		/// </summary>
		internal sealed partial class SourceRoleNamePropertyHandler : DslModeling::DomainPropertyValueHandler<Association, global::System.String>
		{
			private SourceRoleNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.SourceRoleName domain property value handler.
			/// </summary>
			public static readonly SourceRoleNamePropertyHandler Instance = new SourceRoleNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.SourceRoleName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SourceRoleNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.sourceRoleNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sourceRoleNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TargetMultiplicity domain property code
		
		/// <summary>
		/// TargetMultiplicity domain property Id.
		/// </summary>
		public static readonly global::System.Guid TargetMultiplicityDomainPropertyId = new global::System.Guid(0x279215dc, 0x6eb3, 0x4ab0, 0xb2, 0x8b, 0x43, 0x4c, 0x2d, 0xe6, 0xef, 0x6f);
		
		/// <summary>
		/// Storage for TargetMultiplicity
		/// </summary>
		private Multiplicity targetMultiplicityPropertyStorage = Multiplicity.ZeroMany;
		
		/// <summary>
		/// Gets or sets the value of TargetMultiplicity domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.Association/TargetMultiplicity.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.Association/TargetMultiplicity.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("279215dc-6eb3-4ab0-b28b-434c2de6ef6f")]
		public Multiplicity TargetMultiplicity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return targetMultiplicityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TargetMultiplicityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.TargetMultiplicity domain property.
		/// </summary>
		internal sealed partial class TargetMultiplicityPropertyHandler : DslModeling::DomainPropertyValueHandler<Association, Multiplicity>
		{
			private TargetMultiplicityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.TargetMultiplicity domain property value handler.
			/// </summary>
			public static readonly TargetMultiplicityPropertyHandler Instance = new TargetMultiplicityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.TargetMultiplicity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TargetMultiplicityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed Multiplicity GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.targetMultiplicityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, Multiplicity newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				Multiplicity oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.targetMultiplicityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region TargetRoleName domain property code
		
		/// <summary>
		/// TargetRoleName domain property Id.
		/// </summary>
		public static readonly global::System.Guid TargetRoleNameDomainPropertyId = new global::System.Guid(0x8d47cb88, 0x651c, 0x4e1a, 0xb9, 0x96, 0xa0, 0x60, 0x6b, 0x53, 0xeb, 0xa7);
		
		/// <summary>
		/// Storage for TargetRoleName
		/// </summary>
		private global::System.String targetRoleNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of TargetRoleName domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.Association/TargetRoleName.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.Association/TargetRoleName.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("8d47cb88-651c-4e1a-b996-a0606b53eba7")]
		public global::System.String TargetRoleName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return targetRoleNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TargetRoleNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Association.TargetRoleName domain property.
		/// </summary>
		internal sealed partial class TargetRoleNamePropertyHandler : DslModeling::DomainPropertyValueHandler<Association, global::System.String>
		{
			private TargetRoleNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Association.TargetRoleName domain property value handler.
			/// </summary>
			public static readonly TargetRoleNamePropertyHandler Instance = new TargetRoleNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Association.TargetRoleName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TargetRoleNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Association element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.targetRoleNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Association element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.targetRoleNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Source link accessor
		/// <summary>
		/// Get the list of Association links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::pelsoft.FWK_Dsl.Association> GetLinksToTargets ( global::pelsoft.FWK_Dsl.ModelClass sourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.Association>(sourceInstance, global::pelsoft.FWK_Dsl.Association.SourceDomainRoleId);
		}
		#endregion
		#region Target link accessor
		/// <summary>
		/// Get the list of Association links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::pelsoft.FWK_Dsl.Association> GetLinksToSources ( global::pelsoft.FWK_Dsl.ModelClass targetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.Association>(targetInstance, global::pelsoft.FWK_Dsl.Association.TargetDomainRoleId);
		}
		#endregion
		#region Association instance accessors
		
		/// <summary>
		/// Get any Association links between a given ModelClass and a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::pelsoft.FWK_Dsl.Association> GetLinks( global::pelsoft.FWK_Dsl.ModelClass source, global::pelsoft.FWK_Dsl.ModelClass target )
		{
			global::System.Collections.Generic.List<global::pelsoft.FWK_Dsl.Association> outLinks = new global::System.Collections.Generic.List<global::pelsoft.FWK_Dsl.Association>();
			global::System.Collections.Generic.IList<global::pelsoft.FWK_Dsl.Association> links = DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.Association>(source, global::pelsoft.FWK_Dsl.Association.SourceDomainRoleId);
			foreach ( global::pelsoft.FWK_Dsl.Association link in links )
			{
				if ( target.Equals(link.Target) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace pelsoft.FWK_Dsl
{
	/// <summary>
	/// DomainRelationship UnidirectionalAssociation
	/// </summary>
	[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.UnidirectionalAssociation.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.UnidirectionalAssociation.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("ba9f6786-443b-455c-a746-f23d6ad5edee")]
	public partial class UnidirectionalAssociation : Association
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// UnidirectionalAssociation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xba9f6786, 0x443b, 0x455c, 0xa7, 0x46, 0xf2, 0x3d, 0x6a, 0xd5, 0xed, 0xee);
	
				
		/// <summary>
		/// Constructor
		/// Creates a UnidirectionalAssociation link in the same Partition as the given ModelClass
		/// </summary>
		/// <param name="source">ModelClass to use as the source of the relationship.</param>
		/// <param name="target">ModelClass to use as the target of the relationship.</param>
		public UnidirectionalAssociation(ModelClass source, ModelClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(UnidirectionalAssociation.UnidirectionalSourceDomainRoleId, source), new DslModeling::RoleAssignment(UnidirectionalAssociation.UnidirectionalTargetDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UnidirectionalAssociation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UnidirectionalAssociation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public UnidirectionalAssociation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public UnidirectionalAssociation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region UnidirectionalSource domain role code
		
		/// <summary>
		/// UnidirectionalSource domain role Id.
		/// </summary>
		public static readonly global::System.Guid UnidirectionalSourceDomainRoleId = new global::System.Guid(0x7dbe6f11, 0x838b, 0x42ad, 0xae, 0x86, 0x16, 0x4f, 0xff, 0xd7, 0xb3, 0x07);
		
		/// <summary>
		/// DomainRole UnidirectionalSource
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.UnidirectionalAssociation/UnidirectionalSource.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.UnidirectionalAssociation/UnidirectionalSource.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "UnidirectionalTargets", PropertyDisplayNameKey="pelsoft.FWK_Dsl.UnidirectionalAssociation/UnidirectionalSource.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("7dbe6f11-838b-42ad-ae86-164fffd7b307")]
		public virtual ModelClass UnidirectionalSource
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, UnidirectionalSourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, UnidirectionalSourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access UnidirectionalSources of a ModelClass
		/// <summary>
		/// Gets a list of UnidirectionalSources.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelClass> GetUnidirectionalSources(ModelClass element)
		{
			return new DslModeling::LinkedElementCollection<ModelClass>(element, UnidirectionalTargetDomainRoleId);
		}
		#endregion
		#region Source domain role override
		
		/// <summary>
		/// Gets the element playing UnidirectionalSource domain role.
		/// </summary>
		public override ModelClass Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.UnidirectionalSource;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.UnidirectionalSource = value;
			}
		}
		
		#endregion
		#region UnidirectionalTarget domain role code
		
		/// <summary>
		/// UnidirectionalTarget domain role Id.
		/// </summary>
		public static readonly global::System.Guid UnidirectionalTargetDomainRoleId = new global::System.Guid(0x0a2d53cf, 0xe464, 0x4730, 0x9e, 0x5f, 0x74, 0x0e, 0xd6, 0xb5, 0x58, 0x82);
		
		/// <summary>
		/// DomainRole UnidirectionalTarget
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.UnidirectionalAssociation/UnidirectionalTarget.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.UnidirectionalAssociation/UnidirectionalTarget.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "UnidirectionalSources", PropertyDisplayNameKey="pelsoft.FWK_Dsl.UnidirectionalAssociation/UnidirectionalTarget.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("0a2d53cf-e464-4730-9e5f-740ed6b55882")]
		public virtual ModelClass UnidirectionalTarget
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, UnidirectionalTargetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, UnidirectionalTargetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access UnidirectionalTargets of a ModelClass
		/// <summary>
		/// Gets a list of UnidirectionalTargets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelClass> GetUnidirectionalTargets(ModelClass element)
		{
			return new DslModeling::LinkedElementCollection<ModelClass>(element, UnidirectionalSourceDomainRoleId);
		}
		#endregion
		#region Target domain role override
		
		/// <summary>
		/// Gets the element playing UnidirectionalTarget domain role.
		/// </summary>
		public override ModelClass Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.UnidirectionalTarget;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.UnidirectionalTarget = value;
			}
		}
		
		#endregion
		#region UnidirectionalSource link accessor
		/// <summary>
		/// Get the list of UnidirectionalAssociation links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::pelsoft.FWK_Dsl.UnidirectionalAssociation> GetLinksToUnidirectionalTargets ( global::pelsoft.FWK_Dsl.ModelClass unidirectionalSourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.UnidirectionalAssociation>(unidirectionalSourceInstance, global::pelsoft.FWK_Dsl.UnidirectionalAssociation.UnidirectionalSourceDomainRoleId);
		}
		#endregion
		#region UnidirectionalTarget link accessor
		/// <summary>
		/// Get the list of UnidirectionalAssociation links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::pelsoft.FWK_Dsl.UnidirectionalAssociation> GetLinksToUnidirectionalSources ( global::pelsoft.FWK_Dsl.ModelClass unidirectionalTargetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.UnidirectionalAssociation>(unidirectionalTargetInstance, global::pelsoft.FWK_Dsl.UnidirectionalAssociation.UnidirectionalTargetDomainRoleId);
		}
		#endregion
		#region UnidirectionalAssociation instance accessors
		
		/// <summary>
		/// Get any UnidirectionalAssociation links between a given ModelClass and a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::System.Collections.ObjectModel.ReadOnlyCollection<global::pelsoft.FWK_Dsl.UnidirectionalAssociation> GetLinks( global::pelsoft.FWK_Dsl.ModelClass source, global::pelsoft.FWK_Dsl.ModelClass target )
		{
			global::System.Collections.Generic.List<global::pelsoft.FWK_Dsl.UnidirectionalAssociation> outLinks = new global::System.Collections.Generic.List<global::pelsoft.FWK_Dsl.UnidirectionalAssociation>();
			global::System.Collections.Generic.IList<global::pelsoft.FWK_Dsl.UnidirectionalAssociation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.UnidirectionalAssociation>(source, global::pelsoft.FWK_Dsl.UnidirectionalAssociation.UnidirectionalSourceDomainRoleId);
			foreach ( global::pelsoft.FWK_Dsl.UnidirectionalAssociation link in links )
			{
				if ( target.Equals(link.UnidirectionalTarget) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace pelsoft.FWK_Dsl
{
	/// <summary>
	/// DomainRelationship ClassHasAttributes
	/// </summary>
	[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.ClassHasAttributes.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.ClassHasAttributes.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("2aa1b2ab-37e0-4652-b552-9d6fc1a13f94")]
	public partial class ClassHasAttributes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ClassHasAttributes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x2aa1b2ab, 0x37e0, 0x4652, 0xb5, 0x52, 0x9d, 0x6f, 0xc1, 0xa1, 0x3f, 0x94);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ClassHasAttributes link in the same Partition as the given ModelClass
		/// </summary>
		/// <param name="source">ModelClass to use as the source of the relationship.</param>
		/// <param name="target">ModelAttribute to use as the target of the relationship.</param>
		public ClassHasAttributes(ModelClass source, ModelAttribute target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ClassHasAttributes.ModelClassDomainRoleId, source), new DslModeling::RoleAssignment(ClassHasAttributes.AttributeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ClassHasAttributes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ClassHasAttributes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ClassHasAttributes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ClassHasAttributes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ModelClass domain role code
		
		/// <summary>
		/// ModelClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelClassDomainRoleId = new global::System.Guid(0xa97390da, 0xa6de, 0x40c0, 0x90, 0x66, 0x8c, 0x1d, 0x28, 0x37, 0x45, 0xed);
		
		/// <summary>
		/// DomainRole ModelClass
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.ClassHasAttributes/ModelClass.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.ClassHasAttributes/ModelClass.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Attributes", PropertyDisplayNameKey="pelsoft.FWK_Dsl.ClassHasAttributes/ModelClass.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a97390da-a6de-40c0-9066-8c1d283745ed")]
		public virtual ModelClass ModelClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelClass of a ModelAttribute
		/// <summary>
		/// Gets ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelClass GetModelClass(ModelAttribute element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AttributeDomainRoleId) as ModelClass;
		}
		
		/// <summary>
		/// Sets ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelClass(ModelAttribute element, ModelClass newModelClass)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AttributeDomainRoleId, newModelClass);
		}
		#endregion
		#region Attribute domain role code
		
		/// <summary>
		/// Attribute domain role Id.
		/// </summary>
		public static readonly global::System.Guid AttributeDomainRoleId = new global::System.Guid(0xcedf6dbe, 0x38f7, 0x448b, 0xa0, 0x28, 0x1f, 0x68, 0x57, 0x16, 0x9f, 0x8c);
		
		/// <summary>
		/// DomainRole Attribute
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.ClassHasAttributes/Attribute.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.ClassHasAttributes/Attribute.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModelClass", PropertyDisplayNameKey="pelsoft.FWK_Dsl.ClassHasAttributes/Attribute.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("cedf6dbe-38f7-448b-a028-1f6857169f8c")]
		public virtual ModelAttribute Attribute
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelAttribute)DslModeling::DomainRoleInfo.GetRolePlayer(this, AttributeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AttributeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Attributes of a ModelClass
		/// <summary>
		/// Gets a list of Attributes.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelAttribute> GetAttributes(ModelClass element)
		{
			return new DslModeling::LinkedElementCollection<ModelAttribute>(element, ModelClassDomainRoleId);
		}
		#endregion
		#region ModelClass link accessor
		/// <summary>
		/// Get the list of ClassHasAttributes links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::pelsoft.FWK_Dsl.ClassHasAttributes> GetLinksToAttributes ( global::pelsoft.FWK_Dsl.ModelClass modelClassInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.ClassHasAttributes>(modelClassInstance, global::pelsoft.FWK_Dsl.ClassHasAttributes.ModelClassDomainRoleId);
		}
		#endregion
		#region Attribute link accessor
		/// <summary>
		/// Get the ClassHasAttributes link to a ModelAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::pelsoft.FWK_Dsl.ClassHasAttributes GetLinkToModelClass (global::pelsoft.FWK_Dsl.ModelAttribute attributeInstance)
		{
			global::System.Collections.Generic.IList<global::pelsoft.FWK_Dsl.ClassHasAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.ClassHasAttributes>(attributeInstance, global::pelsoft.FWK_Dsl.ClassHasAttributes.AttributeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Attribute not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ClassHasAttributes instance accessors
		
		/// <summary>
		/// Get any ClassHasAttributes links between a given ModelClass and a ModelAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::pelsoft.FWK_Dsl.ClassHasAttributes> GetLinks( global::pelsoft.FWK_Dsl.ModelClass source, global::pelsoft.FWK_Dsl.ModelAttribute target )
		{
			global::System.Collections.Generic.List<global::pelsoft.FWK_Dsl.ClassHasAttributes> outLinks = new global::System.Collections.Generic.List<global::pelsoft.FWK_Dsl.ClassHasAttributes>();
			global::System.Collections.Generic.IList<global::pelsoft.FWK_Dsl.ClassHasAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.ClassHasAttributes>(source, global::pelsoft.FWK_Dsl.ClassHasAttributes.ModelClassDomainRoleId);
			foreach ( global::pelsoft.FWK_Dsl.ClassHasAttributes link in links )
			{
				if ( target.Equals(link.Attribute) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ClassHasAttributes link between a given ModelClassand a ModelAttribute.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::pelsoft.FWK_Dsl.ClassHasAttributes GetLink( global::pelsoft.FWK_Dsl.ModelClass source, global::pelsoft.FWK_Dsl.ModelAttribute target )
		{
			global::System.Collections.Generic.IList<global::pelsoft.FWK_Dsl.ClassHasAttributes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.ClassHasAttributes>(source, global::pelsoft.FWK_Dsl.ClassHasAttributes.ModelClassDomainRoleId);
			foreach ( global::pelsoft.FWK_Dsl.ClassHasAttributes link in links )
			{
				if ( target.Equals(link.Attribute) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace pelsoft.FWK_Dsl
{
	/// <summary>
	/// DomainRelationship ModelRootHasComments
	/// </summary>
	[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.ModelRootHasComments.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.ModelRootHasComments.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("3e7c675d-d213-49a2-a766-84e48ace358e")]
	public partial class ModelRootHasComments : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelRootHasComments domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3e7c675d, 0xd213, 0x49a2, 0xa7, 0x66, 0x84, 0xe4, 0x8a, 0xce, 0x35, 0x8e);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelRootHasComments link in the same Partition as the given ModelRoot
		/// </summary>
		/// <param name="source">ModelRoot to use as the source of the relationship.</param>
		/// <param name="target">Comment to use as the target of the relationship.</param>
		public ModelRootHasComments(ModelRoot source, Comment target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelRootHasComments.ModelRootDomainRoleId, source), new DslModeling::RoleAssignment(ModelRootHasComments.CommentDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasComments(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasComments(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasComments(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasComments(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ModelRoot domain role code
		
		/// <summary>
		/// ModelRoot domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelRootDomainRoleId = new global::System.Guid(0x47d0b5f4, 0x70e7, 0x4ab3, 0xa5, 0x3f, 0x78, 0xa3, 0xab, 0x1a, 0x96, 0x4f);
		
		/// <summary>
		/// DomainRole ModelRoot
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.ModelRootHasComments/ModelRoot.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.ModelRootHasComments/ModelRoot.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Comments", PropertyDisplayNameKey="pelsoft.FWK_Dsl.ModelRootHasComments/ModelRoot.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("47d0b5f4-70e7-4ab3-a53f-78a3ab1a964f")]
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelRoot)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelRootDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelRootDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelRoot of a Comment
		/// <summary>
		/// Gets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelRoot GetModelRoot(Comment element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, CommentDomainRoleId) as ModelRoot;
		}
		
		/// <summary>
		/// Sets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelRoot(Comment element, ModelRoot newModelRoot)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, CommentDomainRoleId, newModelRoot);
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0x6301548d, 0x682e, 0x4895, 0xb4, 0xc5, 0xa5, 0x13, 0x29, 0x29, 0x08, 0x1a);
		
		/// <summary>
		/// DomainRole Comment
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.ModelRootHasComments/Comment.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.ModelRootHasComments/Comment.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModelRoot", PropertyDisplayNameKey="pelsoft.FWK_Dsl.ModelRootHasComments/Comment.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("6301548d-682e-4895-b4c5-a5132929081a")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comments of a ModelRoot
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComments(ModelRoot element)
		{
			return new DslModeling::LinkedElementCollection<Comment>(element, ModelRootDomainRoleId);
		}
		#endregion
		#region ModelRoot link accessor
		/// <summary>
		/// Get the list of ModelRootHasComments links to a ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::pelsoft.FWK_Dsl.ModelRootHasComments> GetLinksToComments ( global::pelsoft.FWK_Dsl.ModelRoot modelRootInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.ModelRootHasComments>(modelRootInstance, global::pelsoft.FWK_Dsl.ModelRootHasComments.ModelRootDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the ModelRootHasComments link to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::pelsoft.FWK_Dsl.ModelRootHasComments GetLinkToModelRoot (global::pelsoft.FWK_Dsl.Comment commentInstance)
		{
			global::System.Collections.Generic.IList<global::pelsoft.FWK_Dsl.ModelRootHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.ModelRootHasComments>(commentInstance, global::pelsoft.FWK_Dsl.ModelRootHasComments.CommentDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Comment not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelRootHasComments instance accessors
		
		/// <summary>
		/// Get any ModelRootHasComments links between a given ModelRoot and a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::pelsoft.FWK_Dsl.ModelRootHasComments> GetLinks( global::pelsoft.FWK_Dsl.ModelRoot source, global::pelsoft.FWK_Dsl.Comment target )
		{
			global::System.Collections.Generic.List<global::pelsoft.FWK_Dsl.ModelRootHasComments> outLinks = new global::System.Collections.Generic.List<global::pelsoft.FWK_Dsl.ModelRootHasComments>();
			global::System.Collections.Generic.IList<global::pelsoft.FWK_Dsl.ModelRootHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.ModelRootHasComments>(source, global::pelsoft.FWK_Dsl.ModelRootHasComments.ModelRootDomainRoleId);
			foreach ( global::pelsoft.FWK_Dsl.ModelRootHasComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelRootHasComments link between a given ModelRootand a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::pelsoft.FWK_Dsl.ModelRootHasComments GetLink( global::pelsoft.FWK_Dsl.ModelRoot source, global::pelsoft.FWK_Dsl.Comment target )
		{
			global::System.Collections.Generic.IList<global::pelsoft.FWK_Dsl.ModelRootHasComments> links = DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.ModelRootHasComments>(source, global::pelsoft.FWK_Dsl.ModelRootHasComments.ModelRootDomainRoleId);
			foreach ( global::pelsoft.FWK_Dsl.ModelRootHasComments link in links )
			{
				if ( target.Equals(link.Comment) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace pelsoft.FWK_Dsl
{
	/// <summary>
	/// DomainRelationship ClassHasOperations
	/// </summary>
	[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.ClassHasOperations.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.ClassHasOperations.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("35888345-b8f7-495f-9ad2-33d31d5e1497")]
	public partial class ClassHasOperations : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ClassHasOperations domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x35888345, 0xb8f7, 0x495f, 0x9a, 0xd2, 0x33, 0xd3, 0x1d, 0x5e, 0x14, 0x97);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ClassHasOperations link in the same Partition as the given ModelClass
		/// </summary>
		/// <param name="source">ModelClass to use as the source of the relationship.</param>
		/// <param name="target">ClassOperation to use as the target of the relationship.</param>
		public ClassHasOperations(ModelClass source, ClassOperation target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ClassHasOperations.ModelClassDomainRoleId, source), new DslModeling::RoleAssignment(ClassHasOperations.OperationDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ClassHasOperations(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ClassHasOperations(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ClassHasOperations(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ClassHasOperations(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ModelClass domain role code
		
		/// <summary>
		/// ModelClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelClassDomainRoleId = new global::System.Guid(0x3977d5fe, 0xd07f, 0x4d2c, 0x8b, 0x12, 0x13, 0x13, 0xab, 0xb8, 0x94, 0x4a);
		
		/// <summary>
		/// DomainRole ModelClass
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.ClassHasOperations/ModelClass.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.ClassHasOperations/ModelClass.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Operations", PropertyDisplayNameKey="pelsoft.FWK_Dsl.ClassHasOperations/ModelClass.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("3977d5fe-d07f-4d2c-8b12-1313abb8944a")]
		public virtual ModelClass ModelClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelClass of a ClassOperation
		/// <summary>
		/// Gets ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelClass GetModelClass(ClassOperation element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, OperationDomainRoleId) as ModelClass;
		}
		
		/// <summary>
		/// Sets ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelClass(ClassOperation element, ModelClass newModelClass)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, OperationDomainRoleId, newModelClass);
		}
		#endregion
		#region Operation domain role code
		
		/// <summary>
		/// Operation domain role Id.
		/// </summary>
		public static readonly global::System.Guid OperationDomainRoleId = new global::System.Guid(0xf7dc7bbf, 0x7a60, 0x4034, 0xbe, 0xe1, 0x46, 0x4b, 0x34, 0x1e, 0x73, 0x73);
		
		/// <summary>
		/// DomainRole Operation
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.ClassHasOperations/Operation.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.ClassHasOperations/Operation.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModelClass", PropertyDisplayNameKey="pelsoft.FWK_Dsl.ClassHasOperations/Operation.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("f7dc7bbf-7a60-4034-bee1-464b341e7373")]
		public virtual ClassOperation Operation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ClassOperation)DslModeling::DomainRoleInfo.GetRolePlayer(this, OperationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, OperationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Operations of a ModelClass
		/// <summary>
		/// Gets a list of Operations.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ClassOperation> GetOperations(ModelClass element)
		{
			return new DslModeling::LinkedElementCollection<ClassOperation>(element, ModelClassDomainRoleId);
		}
		#endregion
		#region ModelClass link accessor
		/// <summary>
		/// Get the list of ClassHasOperations links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::pelsoft.FWK_Dsl.ClassHasOperations> GetLinksToOperations ( global::pelsoft.FWK_Dsl.ModelClass modelClassInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.ClassHasOperations>(modelClassInstance, global::pelsoft.FWK_Dsl.ClassHasOperations.ModelClassDomainRoleId);
		}
		#endregion
		#region Operation link accessor
		/// <summary>
		/// Get the ClassHasOperations link to a ClassOperation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::pelsoft.FWK_Dsl.ClassHasOperations GetLinkToModelClass (global::pelsoft.FWK_Dsl.ClassOperation operationInstance)
		{
			global::System.Collections.Generic.IList<global::pelsoft.FWK_Dsl.ClassHasOperations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.ClassHasOperations>(operationInstance, global::pelsoft.FWK_Dsl.ClassHasOperations.OperationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Operation not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ClassHasOperations instance accessors
		
		/// <summary>
		/// Get any ClassHasOperations links between a given ModelClass and a ClassOperation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::pelsoft.FWK_Dsl.ClassHasOperations> GetLinks( global::pelsoft.FWK_Dsl.ModelClass source, global::pelsoft.FWK_Dsl.ClassOperation target )
		{
			global::System.Collections.Generic.List<global::pelsoft.FWK_Dsl.ClassHasOperations> outLinks = new global::System.Collections.Generic.List<global::pelsoft.FWK_Dsl.ClassHasOperations>();
			global::System.Collections.Generic.IList<global::pelsoft.FWK_Dsl.ClassHasOperations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.ClassHasOperations>(source, global::pelsoft.FWK_Dsl.ClassHasOperations.ModelClassDomainRoleId);
			foreach ( global::pelsoft.FWK_Dsl.ClassHasOperations link in links )
			{
				if ( target.Equals(link.Operation) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ClassHasOperations link between a given ModelClassand a ClassOperation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::pelsoft.FWK_Dsl.ClassHasOperations GetLink( global::pelsoft.FWK_Dsl.ModelClass source, global::pelsoft.FWK_Dsl.ClassOperation target )
		{
			global::System.Collections.Generic.IList<global::pelsoft.FWK_Dsl.ClassHasOperations> links = DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.ClassHasOperations>(source, global::pelsoft.FWK_Dsl.ClassHasOperations.ModelClassDomainRoleId);
			foreach ( global::pelsoft.FWK_Dsl.ClassHasOperations link in links )
			{
				if ( target.Equals(link.Operation) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace pelsoft.FWK_Dsl
{
	/// <summary>
	/// DomainRelationship Generalization
	/// Inheritance between Classes.
	/// </summary>
	[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.Generalization.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.Generalization.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("22f5398b-99a5-4e54-801b-872f2e58c82b")]
	public partial class Generalization : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Generalization domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x22f5398b, 0x99a5, 0x4e54, 0x80, 0x1b, 0x87, 0x2f, 0x2e, 0x58, 0xc8, 0x2b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a Generalization link in the same Partition as the given ModelClass
		/// </summary>
		/// <param name="source">ModelClass to use as the source of the relationship.</param>
		/// <param name="target">ModelClass to use as the target of the relationship.</param>
		public Generalization(ModelClass source, ModelClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(Generalization.SuperclassDomainRoleId, source), new DslModeling::RoleAssignment(Generalization.SubclassDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Generalization(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Generalization(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Generalization(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Generalization(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Superclass domain role code
		
		/// <summary>
		/// Superclass domain role Id.
		/// </summary>
		public static readonly global::System.Guid SuperclassDomainRoleId = new global::System.Guid(0x6378f978, 0x0b30, 0x4255, 0xa5, 0xe8, 0xc9, 0x8a, 0xc3, 0x83, 0x38, 0x16);
		
		/// <summary>
		/// DomainRole Superclass
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.Generalization/Superclass.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.Generalization/Superclass.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Subclasses", PropertyDisplayNameKey="pelsoft.FWK_Dsl.Generalization/Superclass.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("6378f978-0b30-4255-a5e8-c98ac3833816")]
		public virtual ModelClass Superclass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, SuperclassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SuperclassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Superclass of a ModelClass
		/// <summary>
		/// Gets Superclass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelClass GetSuperclass(ModelClass element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SubclassDomainRoleId) as ModelClass;
		}
		
		/// <summary>
		/// Sets Superclass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetSuperclass(ModelClass element, ModelClass newSuperclass)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SubclassDomainRoleId, newSuperclass);
		}
		#endregion
		#region Subclass domain role code
		
		/// <summary>
		/// Subclass domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubclassDomainRoleId = new global::System.Guid(0x478a1f60, 0xdd3d, 0x4da6, 0x86, 0xc5, 0x5f, 0x35, 0x91, 0x68, 0x40, 0xa8);
		
		/// <summary>
		/// DomainRole Subclass
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.Generalization/Subclass.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.Generalization/Subclass.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Superclass", PropertyDisplayNameKey="pelsoft.FWK_Dsl.Generalization/Subclass.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("478a1f60-dd3d-4da6-86c5-5f35916840a8")]
		public virtual ModelClass Subclass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubclassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubclassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Subclasses of a ModelClass
		/// <summary>
		/// Gets a list of Subclasses.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelClass> GetSubclasses(ModelClass element)
		{
			return new DslModeling::LinkedElementCollection<ModelClass>(element, SuperclassDomainRoleId);
		}
		#endregion
		#region Discriminator domain property code
		
		/// <summary>
		/// Discriminator domain property Id.
		/// </summary>
		public static readonly global::System.Guid DiscriminatorDomainPropertyId = new global::System.Guid(0x6aa0ebf8, 0x89bf, 0x4ccf, 0x96, 0xb3, 0x28, 0x6d, 0x2b, 0xb7, 0x00, 0x27);
		
		/// <summary>
		/// Storage for Discriminator
		/// </summary>
		private global::System.String discriminatorPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Discriminator domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.Generalization/Discriminator.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.Generalization/Discriminator.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("6aa0ebf8-89bf-4ccf-96b3-286d2bb70027")]
		public global::System.String Discriminator
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return discriminatorPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DiscriminatorPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Generalization.Discriminator domain property.
		/// </summary>
		internal sealed partial class DiscriminatorPropertyHandler : DslModeling::DomainPropertyValueHandler<Generalization, global::System.String>
		{
			private DiscriminatorPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Generalization.Discriminator domain property value handler.
			/// </summary>
			public static readonly DiscriminatorPropertyHandler Instance = new DiscriminatorPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Generalization.Discriminator domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return DiscriminatorDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Generalization element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.discriminatorPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Generalization element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.discriminatorPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Superclass link accessor
		/// <summary>
		/// Get the list of Generalization links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::pelsoft.FWK_Dsl.Generalization> GetLinksToSubclasses ( global::pelsoft.FWK_Dsl.ModelClass superclassInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.Generalization>(superclassInstance, global::pelsoft.FWK_Dsl.Generalization.SuperclassDomainRoleId);
		}
		#endregion
		#region Subclass link accessor
		/// <summary>
		/// Get the Generalization link to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::pelsoft.FWK_Dsl.Generalization GetLinkToSuperclass (global::pelsoft.FWK_Dsl.ModelClass subclassInstance)
		{
			global::System.Collections.Generic.IList<global::pelsoft.FWK_Dsl.Generalization> links = DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.Generalization>(subclassInstance, global::pelsoft.FWK_Dsl.Generalization.SubclassDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Subclass not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region Generalization instance accessors
		
		/// <summary>
		/// Get any Generalization links between a given ModelClass and a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::pelsoft.FWK_Dsl.Generalization> GetLinks( global::pelsoft.FWK_Dsl.ModelClass source, global::pelsoft.FWK_Dsl.ModelClass target )
		{
			global::System.Collections.Generic.List<global::pelsoft.FWK_Dsl.Generalization> outLinks = new global::System.Collections.Generic.List<global::pelsoft.FWK_Dsl.Generalization>();
			global::System.Collections.Generic.IList<global::pelsoft.FWK_Dsl.Generalization> links = DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.Generalization>(source, global::pelsoft.FWK_Dsl.Generalization.SuperclassDomainRoleId);
			foreach ( global::pelsoft.FWK_Dsl.Generalization link in links )
			{
				if ( target.Equals(link.Subclass) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one Generalization link between a given ModelClassand a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::pelsoft.FWK_Dsl.Generalization GetLink( global::pelsoft.FWK_Dsl.ModelClass source, global::pelsoft.FWK_Dsl.ModelClass target )
		{
			global::System.Collections.Generic.IList<global::pelsoft.FWK_Dsl.Generalization> links = DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.Generalization>(source, global::pelsoft.FWK_Dsl.Generalization.SuperclassDomainRoleId);
			foreach ( global::pelsoft.FWK_Dsl.Generalization link in links )
			{
				if ( target.Equals(link.Subclass) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace pelsoft.FWK_Dsl
{
	/// <summary>
	/// DomainRelationship BidirectionalAssociation
	/// </summary>
	[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.BidirectionalAssociation.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.BidirectionalAssociation.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("36951235-dae2-4b69-b415-ac763323f6dd")]
	public partial class BidirectionalAssociation : Association
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// BidirectionalAssociation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x36951235, 0xdae2, 0x4b69, 0xb4, 0x15, 0xac, 0x76, 0x33, 0x23, 0xf6, 0xdd);
	
				
		/// <summary>
		/// Constructor
		/// Creates a BidirectionalAssociation link in the same Partition as the given ModelClass
		/// </summary>
		/// <param name="source">ModelClass to use as the source of the relationship.</param>
		/// <param name="target">ModelClass to use as the target of the relationship.</param>
		public BidirectionalAssociation(ModelClass source, ModelClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(BidirectionalAssociation.BidirectionalSourceDomainRoleId, source), new DslModeling::RoleAssignment(BidirectionalAssociation.BidirectionalTargetDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BidirectionalAssociation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BidirectionalAssociation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public BidirectionalAssociation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public BidirectionalAssociation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region BidirectionalSource domain role code
		
		/// <summary>
		/// BidirectionalSource domain role Id.
		/// </summary>
		public static readonly global::System.Guid BidirectionalSourceDomainRoleId = new global::System.Guid(0xa58477c3, 0xc5bf, 0x471b, 0xbd, 0x5e, 0x90, 0xed, 0xa6, 0x1b, 0x83, 0x82);
		
		/// <summary>
		/// DomainRole BidirectionalSource
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.BidirectionalAssociation/BidirectionalSource.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.BidirectionalAssociation/BidirectionalSource.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "BidirectionalTargets", PropertyDisplayNameKey="pelsoft.FWK_Dsl.BidirectionalAssociation/BidirectionalSource.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a58477c3-c5bf-471b-bd5e-90eda61b8382")]
		public virtual ModelClass BidirectionalSource
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, BidirectionalSourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BidirectionalSourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access BidirectionalSources of a ModelClass
		/// <summary>
		/// Gets a list of BidirectionalSources.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelClass> GetBidirectionalSources(ModelClass element)
		{
			return new DslModeling::LinkedElementCollection<ModelClass>(element, BidirectionalTargetDomainRoleId);
		}
		#endregion
		#region Source domain role override
		
		/// <summary>
		/// Gets the element playing BidirectionalSource domain role.
		/// </summary>
		public override ModelClass Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.BidirectionalSource;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.BidirectionalSource = value;
			}
		}
		
		#endregion
		#region BidirectionalTarget domain role code
		
		/// <summary>
		/// BidirectionalTarget domain role Id.
		/// </summary>
		public static readonly global::System.Guid BidirectionalTargetDomainRoleId = new global::System.Guid(0x9d2f386f, 0x5233, 0x4da6, 0xad, 0x49, 0xf2, 0xd4, 0x50, 0xd3, 0x1c, 0xdc);
		
		/// <summary>
		/// DomainRole BidirectionalTarget
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.BidirectionalAssociation/BidirectionalTarget.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.BidirectionalAssociation/BidirectionalTarget.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "BidirectionalSources", PropertyDisplayNameKey="pelsoft.FWK_Dsl.BidirectionalAssociation/BidirectionalTarget.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("9d2f386f-5233-4da6-ad49-f2d450d31cdc")]
		public virtual ModelClass BidirectionalTarget
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, BidirectionalTargetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, BidirectionalTargetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access BidirectionalTargets of a ModelClass
		/// <summary>
		/// Gets a list of BidirectionalTargets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelClass> GetBidirectionalTargets(ModelClass element)
		{
			return new DslModeling::LinkedElementCollection<ModelClass>(element, BidirectionalSourceDomainRoleId);
		}
		#endregion
		#region Target domain role override
		
		/// <summary>
		/// Gets the element playing BidirectionalTarget domain role.
		/// </summary>
		public override ModelClass Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.BidirectionalTarget;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.BidirectionalTarget = value;
			}
		}
		
		#endregion
		#region BidirectionalSource link accessor
		/// <summary>
		/// Get the list of BidirectionalAssociation links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::pelsoft.FWK_Dsl.BidirectionalAssociation> GetLinksToBidirectionalTargets ( global::pelsoft.FWK_Dsl.ModelClass bidirectionalSourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.BidirectionalAssociation>(bidirectionalSourceInstance, global::pelsoft.FWK_Dsl.BidirectionalAssociation.BidirectionalSourceDomainRoleId);
		}
		#endregion
		#region BidirectionalTarget link accessor
		/// <summary>
		/// Get the list of BidirectionalAssociation links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::pelsoft.FWK_Dsl.BidirectionalAssociation> GetLinksToBidirectionalSources ( global::pelsoft.FWK_Dsl.ModelClass bidirectionalTargetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.BidirectionalAssociation>(bidirectionalTargetInstance, global::pelsoft.FWK_Dsl.BidirectionalAssociation.BidirectionalTargetDomainRoleId);
		}
		#endregion
		#region BidirectionalAssociation instance accessors
		
		/// <summary>
		/// Get any BidirectionalAssociation links between a given ModelClass and a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::System.Collections.ObjectModel.ReadOnlyCollection<global::pelsoft.FWK_Dsl.BidirectionalAssociation> GetLinks( global::pelsoft.FWK_Dsl.ModelClass source, global::pelsoft.FWK_Dsl.ModelClass target )
		{
			global::System.Collections.Generic.List<global::pelsoft.FWK_Dsl.BidirectionalAssociation> outLinks = new global::System.Collections.Generic.List<global::pelsoft.FWK_Dsl.BidirectionalAssociation>();
			global::System.Collections.Generic.IList<global::pelsoft.FWK_Dsl.BidirectionalAssociation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.BidirectionalAssociation>(source, global::pelsoft.FWK_Dsl.BidirectionalAssociation.BidirectionalSourceDomainRoleId);
			foreach ( global::pelsoft.FWK_Dsl.BidirectionalAssociation link in links )
			{
				if ( target.Equals(link.BidirectionalTarget) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace pelsoft.FWK_Dsl
{
	/// <summary>
	/// DomainRelationship InterfaceHasOperation
	/// </summary>
	[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.InterfaceHasOperation.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.InterfaceHasOperation.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("25603e73-20d1-4a23-85a5-5cb743aa1320")]
	public partial class InterfaceHasOperation : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// InterfaceHasOperation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x25603e73, 0x20d1, 0x4a23, 0x85, 0xa5, 0x5c, 0xb7, 0x43, 0xaa, 0x13, 0x20);
	
				
		/// <summary>
		/// Constructor
		/// Creates a InterfaceHasOperation link in the same Partition as the given ModelInterface
		/// </summary>
		/// <param name="source">ModelInterface to use as the source of the relationship.</param>
		/// <param name="target">InterfaceOperation to use as the target of the relationship.</param>
		public InterfaceHasOperation(ModelInterface source, InterfaceOperation target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(InterfaceHasOperation.InterfaceDomainRoleId, source), new DslModeling::RoleAssignment(InterfaceHasOperation.OperationDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public InterfaceHasOperation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public InterfaceHasOperation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public InterfaceHasOperation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public InterfaceHasOperation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Interface domain role code
		
		/// <summary>
		/// Interface domain role Id.
		/// </summary>
		public static readonly global::System.Guid InterfaceDomainRoleId = new global::System.Guid(0x6e31c6f6, 0x02ea, 0x476d, 0x9a, 0xc2, 0x6e, 0xd4, 0x0c, 0xd7, 0x5c, 0x29);
		
		/// <summary>
		/// DomainRole Interface
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.InterfaceHasOperation/Interface.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.InterfaceHasOperation/Interface.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Operations", PropertyDisplayNameKey="pelsoft.FWK_Dsl.InterfaceHasOperation/Interface.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("6e31c6f6-02ea-476d-9ac2-6ed40cd75c29")]
		public virtual ModelInterface Interface
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelInterface)DslModeling::DomainRoleInfo.GetRolePlayer(this, InterfaceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, InterfaceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Interface of a InterfaceOperation
		/// <summary>
		/// Gets Interface.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelInterface GetInterface(InterfaceOperation element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, OperationDomainRoleId) as ModelInterface;
		}
		
		/// <summary>
		/// Sets Interface.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetInterface(InterfaceOperation element, ModelInterface newInterface)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, OperationDomainRoleId, newInterface);
		}
		#endregion
		#region Operation domain role code
		
		/// <summary>
		/// Operation domain role Id.
		/// </summary>
		public static readonly global::System.Guid OperationDomainRoleId = new global::System.Guid(0x83f5bcea, 0x2e6f, 0x410c, 0x88, 0x2d, 0xdc, 0xd9, 0xfe, 0x0f, 0x09, 0xfb);
		
		/// <summary>
		/// DomainRole Operation
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.InterfaceHasOperation/Operation.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.InterfaceHasOperation/Operation.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Interface", PropertyDisplayNameKey="pelsoft.FWK_Dsl.InterfaceHasOperation/Operation.PropertyDisplayName", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("83f5bcea-2e6f-410c-882d-dcd9fe0f09fb")]
		public virtual InterfaceOperation Operation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (InterfaceOperation)DslModeling::DomainRoleInfo.GetRolePlayer(this, OperationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, OperationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Operations of a ModelInterface
		/// <summary>
		/// Gets a list of Operations.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<InterfaceOperation> GetOperations(ModelInterface element)
		{
			return new DslModeling::LinkedElementCollection<InterfaceOperation>(element, InterfaceDomainRoleId);
		}
		#endregion
		#region Interface link accessor
		/// <summary>
		/// Get the list of InterfaceHasOperation links to a ModelInterface.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::pelsoft.FWK_Dsl.InterfaceHasOperation> GetLinksToOperations ( global::pelsoft.FWK_Dsl.ModelInterface interfaceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.InterfaceHasOperation>(interfaceInstance, global::pelsoft.FWK_Dsl.InterfaceHasOperation.InterfaceDomainRoleId);
		}
		#endregion
		#region Operation link accessor
		/// <summary>
		/// Get the InterfaceHasOperation link to a InterfaceOperation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::pelsoft.FWK_Dsl.InterfaceHasOperation GetLinkToInterface (global::pelsoft.FWK_Dsl.InterfaceOperation operationInstance)
		{
			global::System.Collections.Generic.IList<global::pelsoft.FWK_Dsl.InterfaceHasOperation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.InterfaceHasOperation>(operationInstance, global::pelsoft.FWK_Dsl.InterfaceHasOperation.OperationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Operation not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region InterfaceHasOperation instance accessors
		
		/// <summary>
		/// Get any InterfaceHasOperation links between a given ModelInterface and a InterfaceOperation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::pelsoft.FWK_Dsl.InterfaceHasOperation> GetLinks( global::pelsoft.FWK_Dsl.ModelInterface source, global::pelsoft.FWK_Dsl.InterfaceOperation target )
		{
			global::System.Collections.Generic.List<global::pelsoft.FWK_Dsl.InterfaceHasOperation> outLinks = new global::System.Collections.Generic.List<global::pelsoft.FWK_Dsl.InterfaceHasOperation>();
			global::System.Collections.Generic.IList<global::pelsoft.FWK_Dsl.InterfaceHasOperation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.InterfaceHasOperation>(source, global::pelsoft.FWK_Dsl.InterfaceHasOperation.InterfaceDomainRoleId);
			foreach ( global::pelsoft.FWK_Dsl.InterfaceHasOperation link in links )
			{
				if ( target.Equals(link.Operation) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one InterfaceHasOperation link between a given ModelInterfaceand a InterfaceOperation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::pelsoft.FWK_Dsl.InterfaceHasOperation GetLink( global::pelsoft.FWK_Dsl.ModelInterface source, global::pelsoft.FWK_Dsl.InterfaceOperation target )
		{
			global::System.Collections.Generic.IList<global::pelsoft.FWK_Dsl.InterfaceHasOperation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.InterfaceHasOperation>(source, global::pelsoft.FWK_Dsl.InterfaceHasOperation.InterfaceDomainRoleId);
			foreach ( global::pelsoft.FWK_Dsl.InterfaceHasOperation link in links )
			{
				if ( target.Equals(link.Operation) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace pelsoft.FWK_Dsl
{
	/// <summary>
	/// DomainRelationship MultipleAssociationRole
	/// Links a MultipleAssociation to one of the classes it associates.
	/// </summary>
	[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.MultipleAssociationRole.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.MultipleAssociationRole.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("18d62ae1-fedb-47e0-9b44-688cc0402e91")]
	public partial class MultipleAssociationRole : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MultipleAssociationRole domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x18d62ae1, 0xfedb, 0x47e0, 0x9b, 0x44, 0x68, 0x8c, 0xc0, 0x40, 0x2e, 0x91);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MultipleAssociationRole link in the same Partition as the given MultipleAssociation
		/// </summary>
		/// <param name="source">MultipleAssociation to use as the source of the relationship.</param>
		/// <param name="target">ModelClass to use as the target of the relationship.</param>
		public MultipleAssociationRole(MultipleAssociation source, ModelClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MultipleAssociationRole.MultipleAssociationDomainRoleId, source), new DslModeling::RoleAssignment(MultipleAssociationRole.TypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MultipleAssociationRole(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MultipleAssociationRole(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MultipleAssociationRole(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MultipleAssociationRole(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MultipleAssociation domain role code
		
		/// <summary>
		/// MultipleAssociation domain role Id.
		/// </summary>
		public static readonly global::System.Guid MultipleAssociationDomainRoleId = new global::System.Guid(0xc5c40174, 0x9b88, 0x4b5b, 0xb7, 0x82, 0xd0, 0x73, 0x8a, 0xbe, 0x6c, 0x01);
		
		/// <summary>
		/// DomainRole MultipleAssociation
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.MultipleAssociationRole/MultipleAssociation.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.MultipleAssociationRole/MultipleAssociation.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Types", PropertyDisplayNameKey="pelsoft.FWK_Dsl.MultipleAssociationRole/MultipleAssociation.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("c5c40174-9b88-4b5b-b782-d0738abe6c01")]
		public virtual MultipleAssociation MultipleAssociation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MultipleAssociation)DslModeling::DomainRoleInfo.GetRolePlayer(this, MultipleAssociationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MultipleAssociationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MultipleAssociations of a ModelClass
		/// <summary>
		/// Gets a list of MultipleAssociations.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<MultipleAssociation> GetMultipleAssociations(ModelClass element)
		{
			return new DslModeling::LinkedElementCollection<MultipleAssociation>(element, TypeDomainRoleId);
		}
		#endregion
		#region Type domain role code
		
		/// <summary>
		/// Type domain role Id.
		/// </summary>
		public static readonly global::System.Guid TypeDomainRoleId = new global::System.Guid(0x1f24fd89, 0xc1f6, 0x43f1, 0xa5, 0x95, 0x0f, 0x25, 0x8d, 0xed, 0xc9, 0x31);
		
		/// <summary>
		/// DomainRole Type
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.MultipleAssociationRole/Type.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.MultipleAssociationRole/Type.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MultipleAssociations", PropertyDisplayNameKey="pelsoft.FWK_Dsl.MultipleAssociationRole/Type.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("1f24fd89-c1f6-43f1-a595-0f258dedc931")]
		public virtual ModelClass Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, TypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Types of a MultipleAssociation
		/// <summary>
		/// Gets a list of Types.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelClass> GetTypes(MultipleAssociation element)
		{
			return new DslModeling::LinkedElementCollection<ModelClass>(element, MultipleAssociationDomainRoleId);
		}
		#endregion
		#region Multiplicity domain property code
		
		/// <summary>
		/// Multiplicity domain property Id.
		/// </summary>
		public static readonly global::System.Guid MultiplicityDomainPropertyId = new global::System.Guid(0x168d5922, 0xb547, 0x4670, 0x87, 0x8a, 0xf2, 0x9f, 0x79, 0x04, 0xab, 0x49);
		
		/// <summary>
		/// Storage for Multiplicity
		/// </summary>
		private Multiplicity multiplicityPropertyStorage = Multiplicity.ZeroMany;
		
		/// <summary>
		/// Gets or sets the value of Multiplicity domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.MultipleAssociationRole/Multiplicity.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.MultipleAssociationRole/Multiplicity.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue(Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("168d5922-b547-4670-878a-f29f7904ab49")]
		public Multiplicity Multiplicity
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return multiplicityPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				MultiplicityPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the MultipleAssociationRole.Multiplicity domain property.
		/// </summary>
		internal sealed partial class MultiplicityPropertyHandler : DslModeling::DomainPropertyValueHandler<MultipleAssociationRole, Multiplicity>
		{
			private MultiplicityPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the MultipleAssociationRole.Multiplicity domain property value handler.
			/// </summary>
			public static readonly MultiplicityPropertyHandler Instance = new MultiplicityPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the MultipleAssociationRole.Multiplicity domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return MultiplicityDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed Multiplicity GetValue(MultipleAssociationRole element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.multiplicityPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(MultipleAssociationRole element, Multiplicity newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				Multiplicity oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.multiplicityPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region RoleName domain property code
		
		/// <summary>
		/// RoleName domain property Id.
		/// </summary>
		public static readonly global::System.Guid RoleNameDomainPropertyId = new global::System.Guid(0x9db0ed70, 0xdcc9, 0x4bbe, 0xaf, 0x4a, 0x98, 0x25, 0x14, 0x04, 0xd3, 0x20);
		
		/// <summary>
		/// Storage for RoleName
		/// </summary>
		private global::System.String roleNamePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of RoleName domain property.
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.MultipleAssociationRole/RoleName.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.MultipleAssociationRole/RoleName.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[global::System.ComponentModel.DefaultValue("")]
		[DslModeling::DomainObjectId("9db0ed70-dcc9-4bbe-af4a-98251404d320")]
		public global::System.String RoleName
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return roleNamePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				RoleNamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the MultipleAssociationRole.RoleName domain property.
		/// </summary>
		internal sealed partial class RoleNamePropertyHandler : DslModeling::DomainPropertyValueHandler<MultipleAssociationRole, global::System.String>
		{
			private RoleNamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the MultipleAssociationRole.RoleName domain property value handler.
			/// </summary>
			public static readonly RoleNamePropertyHandler Instance = new RoleNamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the MultipleAssociationRole.RoleName domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return RoleNameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(MultipleAssociationRole element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.roleNamePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(MultipleAssociationRole element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.roleNamePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region MultipleAssociation link accessor
		/// <summary>
		/// Get the list of MultipleAssociationRole links to a MultipleAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::pelsoft.FWK_Dsl.MultipleAssociationRole> GetLinksToTypes ( global::pelsoft.FWK_Dsl.MultipleAssociation multipleAssociationInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.MultipleAssociationRole>(multipleAssociationInstance, global::pelsoft.FWK_Dsl.MultipleAssociationRole.MultipleAssociationDomainRoleId);
		}
		#endregion
		#region Type link accessor
		/// <summary>
		/// Get the list of MultipleAssociationRole links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::pelsoft.FWK_Dsl.MultipleAssociationRole> GetLinksToMultipleAssociations ( global::pelsoft.FWK_Dsl.ModelClass typeInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.MultipleAssociationRole>(typeInstance, global::pelsoft.FWK_Dsl.MultipleAssociationRole.TypeDomainRoleId);
		}
		#endregion
		#region MultipleAssociationRole instance accessors
		
		/// <summary>
		/// Get any MultipleAssociationRole links between a given MultipleAssociation and a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::pelsoft.FWK_Dsl.MultipleAssociationRole> GetLinks( global::pelsoft.FWK_Dsl.MultipleAssociation source, global::pelsoft.FWK_Dsl.ModelClass target )
		{
			global::System.Collections.Generic.List<global::pelsoft.FWK_Dsl.MultipleAssociationRole> outLinks = new global::System.Collections.Generic.List<global::pelsoft.FWK_Dsl.MultipleAssociationRole>();
			global::System.Collections.Generic.IList<global::pelsoft.FWK_Dsl.MultipleAssociationRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.MultipleAssociationRole>(source, global::pelsoft.FWK_Dsl.MultipleAssociationRole.MultipleAssociationDomainRoleId);
			foreach ( global::pelsoft.FWK_Dsl.MultipleAssociationRole link in links )
			{
				if ( target.Equals(link.Type) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MultipleAssociationRole link between a given MultipleAssociationand a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::pelsoft.FWK_Dsl.MultipleAssociationRole GetLink( global::pelsoft.FWK_Dsl.MultipleAssociation source, global::pelsoft.FWK_Dsl.ModelClass target )
		{
			global::System.Collections.Generic.IList<global::pelsoft.FWK_Dsl.MultipleAssociationRole> links = DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.MultipleAssociationRole>(source, global::pelsoft.FWK_Dsl.MultipleAssociationRole.MultipleAssociationDomainRoleId);
			foreach ( global::pelsoft.FWK_Dsl.MultipleAssociationRole link in links )
			{
				if ( target.Equals(link.Type) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace pelsoft.FWK_Dsl
{
	/// <summary>
	/// DomainRelationship AssociationClassRelationship
	/// Identifies a MultipleAssociation with a Class, so that it can have attributes.
	/// </summary>
	[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.AssociationClassRelationship.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.AssociationClassRelationship.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("b03c9983-4a2b-4a2c-b28e-521ebbeb5331")]
	public partial class AssociationClassRelationship : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// AssociationClassRelationship domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb03c9983, 0x4a2b, 0x4a2c, 0xb2, 0x8e, 0x52, 0x1e, 0xbb, 0xeb, 0x53, 0x31);
	
				
		/// <summary>
		/// Constructor
		/// Creates a AssociationClassRelationship link in the same Partition as the given MultipleAssociation
		/// </summary>
		/// <param name="source">MultipleAssociation to use as the source of the relationship.</param>
		/// <param name="target">ModelClass to use as the target of the relationship.</param>
		public AssociationClassRelationship(MultipleAssociation source, ModelClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(AssociationClassRelationship.MultipleAssociationDomainRoleId, source), new DslModeling::RoleAssignment(AssociationClassRelationship.AssociationClassDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AssociationClassRelationship(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AssociationClassRelationship(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public AssociationClassRelationship(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public AssociationClassRelationship(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MultipleAssociation domain role code
		
		/// <summary>
		/// MultipleAssociation domain role Id.
		/// </summary>
		public static readonly global::System.Guid MultipleAssociationDomainRoleId = new global::System.Guid(0x5fe75e95, 0xa21f, 0x48af, 0xb4, 0x84, 0xc5, 0xbd, 0x2b, 0xdf, 0x12, 0x90);
		
		/// <summary>
		/// DomainRole MultipleAssociation
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.AssociationClassRelationship/MultipleAssociation.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.AssociationClassRelationship/MultipleAssociation.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AssociationClass", PropertyDisplayNameKey="pelsoft.FWK_Dsl.AssociationClassRelationship/MultipleAssociation.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("5fe75e95-a21f-48af-b484-c5bd2bdf1290")]
		public virtual MultipleAssociation MultipleAssociation
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MultipleAssociation)DslModeling::DomainRoleInfo.GetRolePlayer(this, MultipleAssociationDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MultipleAssociationDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MultipleAssociation of a ModelClass
		/// <summary>
		/// Gets MultipleAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MultipleAssociation GetMultipleAssociation(ModelClass element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, AssociationClassDomainRoleId) as MultipleAssociation;
		}
		
		/// <summary>
		/// Sets MultipleAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMultipleAssociation(ModelClass element, MultipleAssociation newMultipleAssociation)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, AssociationClassDomainRoleId, newMultipleAssociation);
		}
		#endregion
		#region AssociationClass domain role code
		
		/// <summary>
		/// AssociationClass domain role Id.
		/// </summary>
		public static readonly global::System.Guid AssociationClassDomainRoleId = new global::System.Guid(0x36d28336, 0xda05, 0x4c38, 0xb0, 0x4b, 0x6a, 0x3a, 0xc1, 0xbb, 0xc8, 0xab);
		
		/// <summary>
		/// DomainRole AssociationClass
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.AssociationClassRelationship/AssociationClass.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.AssociationClassRelationship/AssociationClass.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MultipleAssociation", PropertyDisplayNameKey="pelsoft.FWK_Dsl.AssociationClassRelationship/AssociationClass.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("36d28336-da05-4c38-b04b-6a3ac1bbc8ab")]
		public virtual ModelClass AssociationClass
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, AssociationClassDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AssociationClassDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AssociationClass of a MultipleAssociation
		/// <summary>
		/// Gets AssociationClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelClass GetAssociationClass(MultipleAssociation element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, MultipleAssociationDomainRoleId) as ModelClass;
		}
		
		/// <summary>
		/// Sets AssociationClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetAssociationClass(MultipleAssociation element, ModelClass newAssociationClass)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, MultipleAssociationDomainRoleId, newAssociationClass);
		}
		#endregion
		#region MultipleAssociation link accessor
		/// <summary>
		/// Get the AssociationClassRelationship link to a MultipleAssociation.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::pelsoft.FWK_Dsl.AssociationClassRelationship GetLinkToAssociationClass (global::pelsoft.FWK_Dsl.MultipleAssociation multipleAssociationInstance)
		{
			global::System.Collections.Generic.IList<global::pelsoft.FWK_Dsl.AssociationClassRelationship> links = DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.AssociationClassRelationship>(multipleAssociationInstance, global::pelsoft.FWK_Dsl.AssociationClassRelationship.MultipleAssociationDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of MultipleAssociation not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AssociationClass link accessor
		/// <summary>
		/// Get the AssociationClassRelationship link to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::pelsoft.FWK_Dsl.AssociationClassRelationship GetLinkToMultipleAssociation (global::pelsoft.FWK_Dsl.ModelClass associationClassInstance)
		{
			global::System.Collections.Generic.IList<global::pelsoft.FWK_Dsl.AssociationClassRelationship> links = DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.AssociationClassRelationship>(associationClassInstance, global::pelsoft.FWK_Dsl.AssociationClassRelationship.AssociationClassDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of AssociationClass not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region AssociationClassRelationship instance accessors
		
		/// <summary>
		/// Get any AssociationClassRelationship links between a given MultipleAssociation and a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::pelsoft.FWK_Dsl.AssociationClassRelationship> GetLinks( global::pelsoft.FWK_Dsl.MultipleAssociation source, global::pelsoft.FWK_Dsl.ModelClass target )
		{
			global::System.Collections.Generic.List<global::pelsoft.FWK_Dsl.AssociationClassRelationship> outLinks = new global::System.Collections.Generic.List<global::pelsoft.FWK_Dsl.AssociationClassRelationship>();
			global::System.Collections.Generic.IList<global::pelsoft.FWK_Dsl.AssociationClassRelationship> links = DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.AssociationClassRelationship>(source, global::pelsoft.FWK_Dsl.AssociationClassRelationship.MultipleAssociationDomainRoleId);
			foreach ( global::pelsoft.FWK_Dsl.AssociationClassRelationship link in links )
			{
				if ( target.Equals(link.AssociationClass) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one AssociationClassRelationship link between a given MultipleAssociationand a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::pelsoft.FWK_Dsl.AssociationClassRelationship GetLink( global::pelsoft.FWK_Dsl.MultipleAssociation source, global::pelsoft.FWK_Dsl.ModelClass target )
		{
			global::System.Collections.Generic.IList<global::pelsoft.FWK_Dsl.AssociationClassRelationship> links = DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.AssociationClassRelationship>(source, global::pelsoft.FWK_Dsl.AssociationClassRelationship.MultipleAssociationDomainRoleId);
			foreach ( global::pelsoft.FWK_Dsl.AssociationClassRelationship link in links )
			{
				if ( target.Equals(link.AssociationClass) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace pelsoft.FWK_Dsl
{
	/// <summary>
	/// DomainRelationship Aggregation
	/// </summary>
	[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.Aggregation.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.Aggregation.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("6b4ebb4f-e648-4c15-8ef5-45b4cae3c4a2")]
	public partial class Aggregation : Association
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Aggregation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6b4ebb4f, 0xe648, 0x4c15, 0x8e, 0xf5, 0x45, 0xb4, 0xca, 0xe3, 0xc4, 0xa2);
	
				
		/// <summary>
		/// Constructor
		/// Creates a Aggregation link in the same Partition as the given ModelClass
		/// </summary>
		/// <param name="source">ModelClass to use as the source of the relationship.</param>
		/// <param name="target">ModelClass to use as the target of the relationship.</param>
		public Aggregation(ModelClass source, ModelClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(Aggregation.AggregationSourceDomainRoleId, source), new DslModeling::RoleAssignment(Aggregation.AggregationTargetDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Aggregation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Aggregation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Aggregation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Aggregation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region AggregationSource domain role code
		
		/// <summary>
		/// AggregationSource domain role Id.
		/// </summary>
		public static readonly global::System.Guid AggregationSourceDomainRoleId = new global::System.Guid(0x66e3094d, 0xe8da, 0x435d, 0x9c, 0x24, 0xae, 0x12, 0x2f, 0x99, 0xa9, 0x72);
		
		/// <summary>
		/// DomainRole AggregationSource
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.Aggregation/AggregationSource.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.Aggregation/AggregationSource.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "AggregationTargets", PropertyDisplayNameKey="pelsoft.FWK_Dsl.Aggregation/AggregationSource.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("66e3094d-e8da-435d-9c24-ae122f99a972")]
		public virtual ModelClass AggregationSource
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, AggregationSourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AggregationSourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AggregationSources of a ModelClass
		/// <summary>
		/// Gets a list of AggregationSources.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelClass> GetAggregationSources(ModelClass element)
		{
			return new DslModeling::LinkedElementCollection<ModelClass>(element, AggregationTargetDomainRoleId);
		}
		#endregion
		#region Source domain role override
		
		/// <summary>
		/// Gets the element playing AggregationSource domain role.
		/// </summary>
		public override ModelClass Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.AggregationSource;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.AggregationSource = value;
			}
		}
		
		#endregion
		#region AggregationTarget domain role code
		
		/// <summary>
		/// AggregationTarget domain role Id.
		/// </summary>
		public static readonly global::System.Guid AggregationTargetDomainRoleId = new global::System.Guid(0x85054303, 0x8094, 0x475c, 0xb0, 0xaa, 0x57, 0xcc, 0xe2, 0xe5, 0xdc, 0x59);
		
		/// <summary>
		/// DomainRole AggregationTarget
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.Aggregation/AggregationTarget.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.Aggregation/AggregationTarget.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "AggregationSources", PropertyDisplayNameKey="pelsoft.FWK_Dsl.Aggregation/AggregationTarget.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("85054303-8094-475c-b0aa-57cce2e5dc59")]
		public virtual ModelClass AggregationTarget
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, AggregationTargetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, AggregationTargetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access AggregationTargets of a ModelClass
		/// <summary>
		/// Gets a list of AggregationTargets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelClass> GetAggregationTargets(ModelClass element)
		{
			return new DslModeling::LinkedElementCollection<ModelClass>(element, AggregationSourceDomainRoleId);
		}
		#endregion
		#region Target domain role override
		
		/// <summary>
		/// Gets the element playing AggregationTarget domain role.
		/// </summary>
		public override ModelClass Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.AggregationTarget;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.AggregationTarget = value;
			}
		}
		
		#endregion
		#region AggregationSource link accessor
		/// <summary>
		/// Get the list of Aggregation links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::pelsoft.FWK_Dsl.Aggregation> GetLinksToAggregationTargets ( global::pelsoft.FWK_Dsl.ModelClass aggregationSourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.Aggregation>(aggregationSourceInstance, global::pelsoft.FWK_Dsl.Aggregation.AggregationSourceDomainRoleId);
		}
		#endregion
		#region AggregationTarget link accessor
		/// <summary>
		/// Get the list of Aggregation links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::pelsoft.FWK_Dsl.Aggregation> GetLinksToAggregationSources ( global::pelsoft.FWK_Dsl.ModelClass aggregationTargetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.Aggregation>(aggregationTargetInstance, global::pelsoft.FWK_Dsl.Aggregation.AggregationTargetDomainRoleId);
		}
		#endregion
		#region Aggregation instance accessors
		
		/// <summary>
		/// Get any Aggregation links between a given ModelClass and a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::System.Collections.ObjectModel.ReadOnlyCollection<global::pelsoft.FWK_Dsl.Aggregation> GetLinks( global::pelsoft.FWK_Dsl.ModelClass source, global::pelsoft.FWK_Dsl.ModelClass target )
		{
			global::System.Collections.Generic.List<global::pelsoft.FWK_Dsl.Aggregation> outLinks = new global::System.Collections.Generic.List<global::pelsoft.FWK_Dsl.Aggregation>();
			global::System.Collections.Generic.IList<global::pelsoft.FWK_Dsl.Aggregation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.Aggregation>(source, global::pelsoft.FWK_Dsl.Aggregation.AggregationSourceDomainRoleId);
			foreach ( global::pelsoft.FWK_Dsl.Aggregation link in links )
			{
				if ( target.Equals(link.AggregationTarget) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace pelsoft.FWK_Dsl
{
	/// <summary>
	/// DomainRelationship Composition
	/// </summary>
	[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.Composition.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.Composition.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(AllowsDuplicates = true)]
	[DslModeling::DomainObjectId("8ebfa993-a82e-4418-95e7-81ba96d995ff")]
	public partial class Composition : Association
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Composition domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x8ebfa993, 0xa82e, 0x4418, 0x95, 0xe7, 0x81, 0xba, 0x96, 0xd9, 0x95, 0xff);
	
				
		/// <summary>
		/// Constructor
		/// Creates a Composition link in the same Partition as the given ModelClass
		/// </summary>
		/// <param name="source">ModelClass to use as the source of the relationship.</param>
		/// <param name="target">ModelClass to use as the target of the relationship.</param>
		public Composition(ModelClass source, ModelClass target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(Composition.CompositionSourceDomainRoleId, source), new DslModeling::RoleAssignment(Composition.CompositionTargetDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Composition(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Composition(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Composition(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Composition(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region CompositionSource domain role code
		
		/// <summary>
		/// CompositionSource domain role Id.
		/// </summary>
		public static readonly global::System.Guid CompositionSourceDomainRoleId = new global::System.Guid(0xbb684a1d, 0x72d4, 0x43a5, 0x9d, 0xb5, 0xde, 0x8e, 0xb8, 0x55, 0x66, 0xf8);
		
		/// <summary>
		/// DomainRole CompositionSource
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.Composition/CompositionSource.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.Composition/CompositionSource.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "CompositionTargets", PropertyDisplayNameKey="pelsoft.FWK_Dsl.Composition/CompositionSource.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("bb684a1d-72d4-43a5-9db5-de8eb85566f8")]
		public virtual ModelClass CompositionSource
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, CompositionSourceDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CompositionSourceDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CompositionSources of a ModelClass
		/// <summary>
		/// Gets a list of CompositionSources.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelClass> GetCompositionSources(ModelClass element)
		{
			return new DslModeling::LinkedElementCollection<ModelClass>(element, CompositionTargetDomainRoleId);
		}
		#endregion
		#region Source domain role override
		
		/// <summary>
		/// Gets the element playing CompositionSource domain role.
		/// </summary>
		public override ModelClass Source
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.CompositionSource;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.CompositionSource = value;
			}
		}
		
		#endregion
		#region CompositionTarget domain role code
		
		/// <summary>
		/// CompositionTarget domain role Id.
		/// </summary>
		public static readonly global::System.Guid CompositionTargetDomainRoleId = new global::System.Guid(0x25c446ef, 0x650f, 0x45bf, 0x85, 0x0e, 0x9e, 0x3f, 0x55, 0x6c, 0xed, 0x8c);
		
		/// <summary>
		/// DomainRole CompositionTarget
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.Composition/CompositionTarget.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.Composition/CompositionTarget.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "CompositionSources", PropertyDisplayNameKey="pelsoft.FWK_Dsl.Composition/CompositionTarget.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("25c446ef-650f-45bf-850e-9e3f556ced8c")]
		public virtual ModelClass CompositionTarget
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelClass)DslModeling::DomainRoleInfo.GetRolePlayer(this, CompositionTargetDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CompositionTargetDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access CompositionTargets of a ModelClass
		/// <summary>
		/// Gets a list of CompositionTargets.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelClass> GetCompositionTargets(ModelClass element)
		{
			return new DslModeling::LinkedElementCollection<ModelClass>(element, CompositionSourceDomainRoleId);
		}
		#endregion
		#region Target domain role override
		
		/// <summary>
		/// Gets the element playing CompositionTarget domain role.
		/// </summary>
		public override ModelClass Target
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return this.CompositionTarget;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				this.CompositionTarget = value;
			}
		}
		
		#endregion
		#region CompositionSource link accessor
		/// <summary>
		/// Get the list of Composition links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::pelsoft.FWK_Dsl.Composition> GetLinksToCompositionTargets ( global::pelsoft.FWK_Dsl.ModelClass compositionSourceInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.Composition>(compositionSourceInstance, global::pelsoft.FWK_Dsl.Composition.CompositionSourceDomainRoleId);
		}
		#endregion
		#region CompositionTarget link accessor
		/// <summary>
		/// Get the list of Composition links to a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::pelsoft.FWK_Dsl.Composition> GetLinksToCompositionSources ( global::pelsoft.FWK_Dsl.ModelClass compositionTargetInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.Composition>(compositionTargetInstance, global::pelsoft.FWK_Dsl.Composition.CompositionTargetDomainRoleId);
		}
		#endregion
		#region Composition instance accessors
		
		/// <summary>
		/// Get any Composition links between a given ModelClass and a ModelClass.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static new global::System.Collections.ObjectModel.ReadOnlyCollection<global::pelsoft.FWK_Dsl.Composition> GetLinks( global::pelsoft.FWK_Dsl.ModelClass source, global::pelsoft.FWK_Dsl.ModelClass target )
		{
			global::System.Collections.Generic.List<global::pelsoft.FWK_Dsl.Composition> outLinks = new global::System.Collections.Generic.List<global::pelsoft.FWK_Dsl.Composition>();
			global::System.Collections.Generic.IList<global::pelsoft.FWK_Dsl.Composition> links = DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.Composition>(source, global::pelsoft.FWK_Dsl.Composition.CompositionSourceDomainRoleId);
			foreach ( global::pelsoft.FWK_Dsl.Composition link in links )
			{
				if ( target.Equals(link.CompositionTarget) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		#endregion
	}
}
namespace pelsoft.FWK_Dsl
{
	/// <summary>
	/// DomainRelationship ModelRootHasTypes
	/// </summary>
	[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.ModelRootHasTypes.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.ModelRootHasTypes.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("5de6ae0e-621a-4140-b8ca-a1322f32119d")]
	public partial class ModelRootHasTypes : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// ModelRootHasTypes domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5de6ae0e, 0x621a, 0x4140, 0xb8, 0xca, 0xa1, 0x32, 0x2f, 0x32, 0x11, 0x9d);
	
				
		/// <summary>
		/// Constructor
		/// Creates a ModelRootHasTypes link in the same Partition as the given ModelRoot
		/// </summary>
		/// <param name="source">ModelRoot to use as the source of the relationship.</param>
		/// <param name="target">ModelType to use as the target of the relationship.</param>
		public ModelRootHasTypes(ModelRoot source, ModelType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(ModelRootHasTypes.ModelRootDomainRoleId, source), new DslModeling::RoleAssignment(ModelRootHasTypes.TypeDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasTypes(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasTypes(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public ModelRootHasTypes(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public ModelRootHasTypes(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region ModelRoot domain role code
		
		/// <summary>
		/// ModelRoot domain role Id.
		/// </summary>
		public static readonly global::System.Guid ModelRootDomainRoleId = new global::System.Guid(0x3dad422d, 0x4aad, 0x45ae, 0x90, 0x06, 0x9e, 0x59, 0xf2, 0x9b, 0xea, 0xbb);
		
		/// <summary>
		/// DomainRole ModelRoot
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.ModelRootHasTypes/ModelRoot.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.ModelRootHasTypes/ModelRoot.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Types", PropertyDisplayNameKey="pelsoft.FWK_Dsl.ModelRootHasTypes/ModelRoot.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("3dad422d-4aad-45ae-9006-9e59f29beabb")]
		public virtual ModelRoot ModelRoot
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelRoot)DslModeling::DomainRoleInfo.GetRolePlayer(this, ModelRootDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ModelRootDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access ModelRoot of a ModelType
		/// <summary>
		/// Gets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static ModelRoot GetModelRoot(ModelType element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, TypeDomainRoleId) as ModelRoot;
		}
		
		/// <summary>
		/// Sets ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetModelRoot(ModelType element, ModelRoot newModelRoot)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, TypeDomainRoleId, newModelRoot);
		}
		#endregion
		#region Type domain role code
		
		/// <summary>
		/// Type domain role Id.
		/// </summary>
		public static readonly global::System.Guid TypeDomainRoleId = new global::System.Guid(0x5ee86da2, 0xcbd5, 0x49e6, 0xa5, 0xe3, 0x93, 0x06, 0x38, 0x73, 0x57, 0x9a);
		
		/// <summary>
		/// DomainRole Type
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.ModelRootHasTypes/Type.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.ModelRootHasTypes/Type.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "ModelRoot", PropagatesDelete = true, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("5ee86da2-cbd5-49e6-a5e3-93063873579a")]
		public virtual ModelType Type
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelType)DslModeling::DomainRoleInfo.GetRolePlayer(this, TypeDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TypeDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Types of a ModelRoot
		/// <summary>
		/// Gets a list of Types.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelType> GetTypes(ModelRoot element)
		{
			return new DslModeling::LinkedElementCollection<ModelType>(element, ModelRootDomainRoleId);
		}
		#endregion
		#region ModelRoot link accessor
		/// <summary>
		/// Get the list of ModelRootHasTypes links to a ModelRoot.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::pelsoft.FWK_Dsl.ModelRootHasTypes> GetLinksToTypes ( global::pelsoft.FWK_Dsl.ModelRoot modelRootInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.ModelRootHasTypes>(modelRootInstance, global::pelsoft.FWK_Dsl.ModelRootHasTypes.ModelRootDomainRoleId);
		}
		#endregion
		#region Type link accessor
		/// <summary>
		/// Get the ModelRootHasTypes link to a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::pelsoft.FWK_Dsl.ModelRootHasTypes GetLinkToModelRoot (global::pelsoft.FWK_Dsl.ModelType typeInstance)
		{
			global::System.Collections.Generic.IList<global::pelsoft.FWK_Dsl.ModelRootHasTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.ModelRootHasTypes>(typeInstance, global::pelsoft.FWK_Dsl.ModelRootHasTypes.TypeDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Type not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region ModelRootHasTypes instance accessors
		
		/// <summary>
		/// Get any ModelRootHasTypes links between a given ModelRoot and a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::pelsoft.FWK_Dsl.ModelRootHasTypes> GetLinks( global::pelsoft.FWK_Dsl.ModelRoot source, global::pelsoft.FWK_Dsl.ModelType target )
		{
			global::System.Collections.Generic.List<global::pelsoft.FWK_Dsl.ModelRootHasTypes> outLinks = new global::System.Collections.Generic.List<global::pelsoft.FWK_Dsl.ModelRootHasTypes>();
			global::System.Collections.Generic.IList<global::pelsoft.FWK_Dsl.ModelRootHasTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.ModelRootHasTypes>(source, global::pelsoft.FWK_Dsl.ModelRootHasTypes.ModelRootDomainRoleId);
			foreach ( global::pelsoft.FWK_Dsl.ModelRootHasTypes link in links )
			{
				if ( target.Equals(link.Type) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one ModelRootHasTypes link between a given ModelRootand a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::pelsoft.FWK_Dsl.ModelRootHasTypes GetLink( global::pelsoft.FWK_Dsl.ModelRoot source, global::pelsoft.FWK_Dsl.ModelType target )
		{
			global::System.Collections.Generic.IList<global::pelsoft.FWK_Dsl.ModelRootHasTypes> links = DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.ModelRootHasTypes>(source, global::pelsoft.FWK_Dsl.ModelRootHasTypes.ModelRootDomainRoleId);
			foreach ( global::pelsoft.FWK_Dsl.ModelRootHasTypes link in links )
			{
				if ( target.Equals(link.Type) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace pelsoft.FWK_Dsl
{
	/// <summary>
	/// DomainRelationship CommentReferencesSubjects
	/// </summary>
	[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.CommentReferencesSubjects.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.CommentReferencesSubjects.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("352569a6-cb99-46ce-9ee7-05cebad05232")]
	public partial class CommentReferencesSubjects : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// CommentReferencesSubjects domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x352569a6, 0xcb99, 0x46ce, 0x9e, 0xe7, 0x05, 0xce, 0xba, 0xd0, 0x52, 0x32);
	
				
		/// <summary>
		/// Constructor
		/// Creates a CommentReferencesSubjects link in the same Partition as the given Comment
		/// </summary>
		/// <param name="source">Comment to use as the source of the relationship.</param>
		/// <param name="target">ModelType to use as the target of the relationship.</param>
		public CommentReferencesSubjects(Comment source, ModelType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(CommentReferencesSubjects.CommentDomainRoleId, source), new DslModeling::RoleAssignment(CommentReferencesSubjects.SubjectDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferencesSubjects(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferencesSubjects(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public CommentReferencesSubjects(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public CommentReferencesSubjects(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Comment domain role code
		
		/// <summary>
		/// Comment domain role Id.
		/// </summary>
		public static readonly global::System.Guid CommentDomainRoleId = new global::System.Guid(0xbd2e1a46, 0xfa46, 0x404a, 0x8a, 0x9e, 0x47, 0xbd, 0x26, 0xa2, 0x50, 0x5b);
		
		/// <summary>
		/// DomainRole Comment
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.CommentReferencesSubjects/Comment.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.CommentReferencesSubjects/Comment.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Subjects", PropertyDisplayNameKey="pelsoft.FWK_Dsl.CommentReferencesSubjects/Comment.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("bd2e1a46-fa46-404a-8a9e-47bd26a2505b")]
		public virtual Comment Comment
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Comment)DslModeling::DomainRoleInfo.GetRolePlayer(this, CommentDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, CommentDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Comments of a ModelType
		/// <summary>
		/// Gets a list of Comments.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Comment> GetComments(ModelType element)
		{
			return new DslModeling::LinkedElementCollection<Comment>(element, SubjectDomainRoleId);
		}
		#endregion
		#region Subject domain role code
		
		/// <summary>
		/// Subject domain role Id.
		/// </summary>
		public static readonly global::System.Guid SubjectDomainRoleId = new global::System.Guid(0x3f557f44, 0x1e48, 0x4112, 0x94, 0x6f, 0x9f, 0x7a, 0xb9, 0xd5, 0xfe, 0x30);
		
		/// <summary>
		/// DomainRole Subject
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.CommentReferencesSubjects/Subject.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.CommentReferencesSubjects/Subject.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Comments", PropertyDisplayNameKey="pelsoft.FWK_Dsl.CommentReferencesSubjects/Subject.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("3f557f44-1e48-4112-946f-9f7ab9d5fe30")]
		public virtual ModelType Subject
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelType)DslModeling::DomainRoleInfo.GetRolePlayer(this, SubjectDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SubjectDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Subjects of a Comment
		/// <summary>
		/// Gets a list of Subjects.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelType> GetSubjects(Comment element)
		{
			return new DslModeling::LinkedElementCollection<ModelType>(element, CommentDomainRoleId);
		}
		#endregion
		#region Comment link accessor
		/// <summary>
		/// Get the list of CommentReferencesSubjects links to a Comment.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::pelsoft.FWK_Dsl.CommentReferencesSubjects> GetLinksToSubjects ( global::pelsoft.FWK_Dsl.Comment commentInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.CommentReferencesSubjects>(commentInstance, global::pelsoft.FWK_Dsl.CommentReferencesSubjects.CommentDomainRoleId);
		}
		#endregion
		#region Subject link accessor
		/// <summary>
		/// Get the list of CommentReferencesSubjects links to a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::pelsoft.FWK_Dsl.CommentReferencesSubjects> GetLinksToComments ( global::pelsoft.FWK_Dsl.ModelType subjectInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.CommentReferencesSubjects>(subjectInstance, global::pelsoft.FWK_Dsl.CommentReferencesSubjects.SubjectDomainRoleId);
		}
		#endregion
		#region CommentReferencesSubjects instance accessors
		
		/// <summary>
		/// Get any CommentReferencesSubjects links between a given Comment and a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::pelsoft.FWK_Dsl.CommentReferencesSubjects> GetLinks( global::pelsoft.FWK_Dsl.Comment source, global::pelsoft.FWK_Dsl.ModelType target )
		{
			global::System.Collections.Generic.List<global::pelsoft.FWK_Dsl.CommentReferencesSubjects> outLinks = new global::System.Collections.Generic.List<global::pelsoft.FWK_Dsl.CommentReferencesSubjects>();
			global::System.Collections.Generic.IList<global::pelsoft.FWK_Dsl.CommentReferencesSubjects> links = DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.CommentReferencesSubjects>(source, global::pelsoft.FWK_Dsl.CommentReferencesSubjects.CommentDomainRoleId);
			foreach ( global::pelsoft.FWK_Dsl.CommentReferencesSubjects link in links )
			{
				if ( target.Equals(link.Subject) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one CommentReferencesSubjects link between a given Commentand a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::pelsoft.FWK_Dsl.CommentReferencesSubjects GetLink( global::pelsoft.FWK_Dsl.Comment source, global::pelsoft.FWK_Dsl.ModelType target )
		{
			global::System.Collections.Generic.IList<global::pelsoft.FWK_Dsl.CommentReferencesSubjects> links = DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.CommentReferencesSubjects>(source, global::pelsoft.FWK_Dsl.CommentReferencesSubjects.CommentDomainRoleId);
			foreach ( global::pelsoft.FWK_Dsl.CommentReferencesSubjects link in links )
			{
				if ( target.Equals(link.Subject) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace pelsoft.FWK_Dsl
{
	/// <summary>
	/// DomainRelationship Implementation
	/// </summary>
	[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.Implementation.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.Implementation.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("f6b1d589-2b69-4ae1-987b-4a9657d490a4")]
	public partial class Implementation : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// Implementation domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf6b1d589, 0x2b69, 0x4ae1, 0x98, 0x7b, 0x4a, 0x96, 0x57, 0xd4, 0x90, 0xa4);
	
				
		/// <summary>
		/// Constructor
		/// Creates a Implementation link in the same Partition as the given ModelInterface
		/// </summary>
		/// <param name="source">ModelInterface to use as the source of the relationship.</param>
		/// <param name="target">ModelType to use as the target of the relationship.</param>
		public Implementation(ModelInterface source, ModelType target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(Implementation.ImplementDomainRoleId, source), new DslModeling::RoleAssignment(Implementation.ImplementorDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Implementation(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Implementation(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartition : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public Implementation(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public Implementation(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Implement domain role code
		
		/// <summary>
		/// Implement domain role Id.
		/// </summary>
		public static readonly global::System.Guid ImplementDomainRoleId = new global::System.Guid(0x06d38e48, 0x7a6f, 0x4337, 0xbe, 0x8b, 0x49, 0xd0, 0xda, 0xbd, 0x0e, 0xcc);
		
		/// <summary>
		/// DomainRole Implement
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.Implementation/Implement.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.Implementation/Implement.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Implementors", PropertyDisplayNameKey="pelsoft.FWK_Dsl.Implementation/Implement.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("06d38e48-7a6f-4337-be8b-49d0dabd0ecc")]
		public virtual ModelInterface Implement
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelInterface)DslModeling::DomainRoleInfo.GetRolePlayer(this, ImplementDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ImplementDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Implements of a ModelType
		/// <summary>
		/// Gets a list of Implements.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelInterface> GetImplements(ModelType element)
		{
			return new DslModeling::LinkedElementCollection<ModelInterface>(element, ImplementorDomainRoleId);
		}
		#endregion
		#region Implementor domain role code
		
		/// <summary>
		/// Implementor domain role Id.
		/// </summary>
		public static readonly global::System.Guid ImplementorDomainRoleId = new global::System.Guid(0xdd5dcd88, 0x790c, 0x41fe, 0xae, 0x8b, 0x75, 0x97, 0xa9, 0x99, 0x40, 0x1c);
		
		/// <summary>
		/// DomainRole Implementor
		/// </summary>
		[DslDesign::DisplayNameResource("pelsoft.FWK_Dsl.Implementation/Implementor.DisplayName", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("pelsoft.FWK_Dsl.Implementation/Implementor.Description", typeof(global::pelsoft.FWK_Dsl.FWK_DslDomainModel), "pelsoft.FWK_Dsl.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Implements", PropertyDisplayNameKey="pelsoft.FWK_Dsl.Implementation/Implementor.PropertyDisplayName", Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("dd5dcd88-790c-41fe-ae8b-7597a999401c")]
		public virtual ModelType Implementor
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (ModelType)DslModeling::DomainRoleInfo.GetRolePlayer(this, ImplementorDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ImplementorDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Implementors of a ModelInterface
		/// <summary>
		/// Gets a list of Implementors.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<ModelType> GetImplementors(ModelInterface element)
		{
			return new DslModeling::LinkedElementCollection<ModelType>(element, ImplementDomainRoleId);
		}
		#endregion
		#region Implement link accessor
		/// <summary>
		/// Get the list of Implementation links to a ModelInterface.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::pelsoft.FWK_Dsl.Implementation> GetLinksToImplementors ( global::pelsoft.FWK_Dsl.ModelInterface implementInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.Implementation>(implementInstance, global::pelsoft.FWK_Dsl.Implementation.ImplementDomainRoleId);
		}
		#endregion
		#region Implementor link accessor
		/// <summary>
		/// Get the list of Implementation links to a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::pelsoft.FWK_Dsl.Implementation> GetLinksToImplements ( global::pelsoft.FWK_Dsl.ModelType implementorInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.Implementation>(implementorInstance, global::pelsoft.FWK_Dsl.Implementation.ImplementorDomainRoleId);
		}
		#endregion
		#region Implementation instance accessors
		
		/// <summary>
		/// Get any Implementation links between a given ModelInterface and a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::pelsoft.FWK_Dsl.Implementation> GetLinks( global::pelsoft.FWK_Dsl.ModelInterface source, global::pelsoft.FWK_Dsl.ModelType target )
		{
			global::System.Collections.Generic.List<global::pelsoft.FWK_Dsl.Implementation> outLinks = new global::System.Collections.Generic.List<global::pelsoft.FWK_Dsl.Implementation>();
			global::System.Collections.Generic.IList<global::pelsoft.FWK_Dsl.Implementation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.Implementation>(source, global::pelsoft.FWK_Dsl.Implementation.ImplementDomainRoleId);
			foreach ( global::pelsoft.FWK_Dsl.Implementation link in links )
			{
				if ( target.Equals(link.Implementor) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one Implementation link between a given ModelInterfaceand a ModelType.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::pelsoft.FWK_Dsl.Implementation GetLink( global::pelsoft.FWK_Dsl.ModelInterface source, global::pelsoft.FWK_Dsl.ModelType target )
		{
			global::System.Collections.Generic.IList<global::pelsoft.FWK_Dsl.Implementation> links = DslModeling::DomainRoleInfo.GetElementLinks<global::pelsoft.FWK_Dsl.Implementation>(source, global::pelsoft.FWK_Dsl.Implementation.ImplementDomainRoleId);
			foreach ( global::pelsoft.FWK_Dsl.Implementation link in links )
			{
				if ( target.Equals(link.Implementor) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
