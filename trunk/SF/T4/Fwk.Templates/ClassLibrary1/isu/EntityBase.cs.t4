<#@ template language="C#" #>
<#@ property processor="PropertyProcessor" name="EntityName" #>
<#@ property processor="PropertyProcessor" name="TargetNamespace" #>
<#@ property processor="PropertyProcessor" name="ResourcesNamespace" #>
<#@ property processor="PropertyProcessor" name="QuerySchema" #>
<#@ property processor="PropertyProcessor" name="TableSchema" #>
<#@ property processor="PropertyProcessor" name="GenerateResources" #>
<#@ assembly name="System.dll" #>
<#@ assembly name="System.Data.dll" #> 
<#@ assembly name="System.Xml.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Text" #>
<#@ include file="Templates\Text\HelperFunctions.cs.t4" #>
using System;
using System.Collections.Generic;
using System.Text;
using ISU.Common.BackEnd;
using ISU.Common.BackEnd.Attributes;
using ISU.Common.BackEnd.Entities;
using ISU.Common.BackEnd.Exceptions;
using Microsoft.Practices.EnterpriseLibrary.Validation.Validators;
using Microsoft.Practices.EnterpriseLibrary.Validation;
<# if (GenerateResources) { #>using <#= ResourcesNamespace #>;<# }#>

namespace <#= TargetNamespace #>.Entities
{
	[Serializable]
	public abstract class <#= EntityName #>Base : EntityBase
	{
		public class PropertyNames
		{
<# foreach (DataRow row in QuerySchema.Rows) { #>
			public const System.String <#= BuildConstantPropertyName(row["ColumnName"].ToString()) #> = "<#= BuildPropertyName(row["ColumnName"].ToString()) #>";
<# } #>
		}

		#region Fields
		
<# foreach (DataRow row in QuerySchema.Rows) { #>
		private <#= GetNullableType(row["DataType"].ToString()) #> <#= BuildPrivateFieldName(row["ColumnName"].ToString()) #>;
<# } #>		
	
		#endregion	
		
		#region Properties
		
<# foreach (DataRow row in QuerySchema.Rows) { #>
		<#= GetMappingAttribute(row, TableSchema) #><#= GetValidationAttributes(row, TableSchema, EntityName,  GenerateResources) #>public <#= GetNullableType(row["DataType"].ToString()) #> <#= BuildPropertyName(row["ColumnName"].ToString()) #>
		{
			get { return <#= BuildPrivateFieldName(row["ColumnName"].ToString()) #>; }
			set { <#= BuildPrivateFieldName(row["ColumnName"].ToString()) #> = value; }
		}
<# } #>		
	
		#endregion						
	}
}
