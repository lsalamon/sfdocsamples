<#@ template language="C#" #>
<#@ property processor="PropertyProcessor" name="TableName" #>
<#@ property processor="PropertyProcessor" name="BaseQuery" #>
<#@ property processor="PropertyProcessor" name="EntityName" #>
<#@ property processor="PropertyProcessor" name="TargetNamespace" #>
<#@ property processor="PropertyProcessor" name="QuerySchema" #>
<#@ property processor="PropertyProcessor" name="TableSchema" #>
<#@ assembly name="System.dll" #>
<#@ assembly name="System.Data.dll" #> 
<#@ assembly name="System.Xml.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Text" #>
<#@ include file="Templates\Text\HelperFunctions.cs.t4" #>
using System;
using System.Collections.Generic;
using System.Text;
using System.Data;
using System.Data.Common;
using ISU.Common.BackEnd;
using ISU.Common.BackEnd.Attributes;
using ISU.Common.BackEnd.DataAccess;
using ISU.Common.BackEnd.Entities;
using <#= TargetNamespace #>.Entities;
using Microsoft.Practices.EnterpriseLibrary.Validation;

namespace <#= TargetNamespace #>.Controllers
{
	[ControlledType(typeof(<#= EntityName #>))]
	internal abstract class <#= EntityName #>ControllerBase : EntityControllerBase<<#= EntityName #>>
	{
	
		#region QueryHolder
		
		private static volatile QueryHolder<<#= EntityName #>> _queryHolder;
		private static object _syncRoot = new object();

		protected override QueryHolder<<#= EntityName #>> EntityQueryHolder
		{
			get
			{
				if (_queryHolder == null)
				{
					lock (_syncRoot)
					{
						if (_queryHolder == null)
						{
							_queryHolder = new QueryHolder<<#= EntityName #>>(DbServiceName, @"<#= TableName #>", @"select * from (<#= BaseQuery #>) as tmp");
						}
					}
				}

				return _queryHolder;
			}
		}
		
		#endregion
	
		#region Methods overrides
		
		protected override ParameterList GetKeyParameters(<#= EntityName #> entity)
		{
			ParameterList parameters = new ParameterList();
<# foreach (DataRow row in TableSchema.Select(string.Format("IsKey = '{0}'", true))) { #>			
			parameters.Add(Utils.BuildParameter<<#= EntityName #>>(<#= EntityName #>.PropertyNames.<#= BuildConstantPropertyName(row["ColumnName"].ToString()) #>, entity.<#= BuildPropertyName(row["ColumnName"].ToString()) #>, ParameterDirection.Input));
<# } #>			
			return parameters;
		}
		
		protected override ParameterList GetParameters(<#= EntityName #> entity, bool isNewEntity)
		{
			ParameterList parameters = new ParameterList();
<# foreach (DataRow row in TableSchema.Select(string.Format("IsAutoIncrement <> '{0}'", true))) { #>						
			parameters.Add(Utils.BuildParameter<<#= EntityName #>>(<#= EntityName #>.PropertyNames.<#= BuildConstantPropertyName(row["ColumnName"].ToString()) #>, entity.<#= BuildPropertyName(row["ColumnName"].ToString()) #>, ParameterDirection.Input));
<# } #>				

<# DataRow[] autoIncRows = TableSchema.Select(string.Format("IsAutoIncrement = '{0}'", true)); #>

<# if (autoIncRows.Length > 0) { #>
			if (isNewEntity)
			{
<#		foreach (DataRow row in autoIncRows) { #>			
				parameters.Add(Utils.BuildParameter<<#= EntityName #>>(<#= EntityName #>.PropertyNames.<#= BuildConstantPropertyName(row["ColumnName"].ToString()) #>, null, ParameterDirection.Output));
<#		} #>				
			}
			else
			{
<#		foreach (DataRow row in autoIncRows) { #>			
				parameters.Add(Utils.BuildParameter<<#= EntityName #>>(<#= EntityName #>.PropertyNames.<#= BuildConstantPropertyName(row["ColumnName"].ToString()) #>, entity.<#= BuildPropertyName(row["ColumnName"].ToString()) #>, ParameterDirection.Input));
<#		} #>				
			}
<# } #>				

			return parameters;
		}		
		
		protected override void SetKeyValues(<#= EntityName #> entity, ParameterList parameters)
		{
<# foreach (DataRow row in TableSchema.Select(string.Format("IsKey = '{0}'", true))) { #>			
			entity.<#= BuildPropertyName(row["ColumnName"].ToString()) #> = Utils.GetParameterValue<<#= EntityName #>, <#= GetNullableType(row["DataType"].ToString()) #>>(<#= EntityName #>.PropertyNames.<#= BuildConstantPropertyName(row["ColumnName"].ToString()) #>, parameters);
<# } #>			
		}

		protected override <#= EntityName #> ImportReaderRow(System.Data.IDataReader dataReader)
		{
			<#= EntityName #> result = new <#= EntityName #>();
			
<# foreach (DataRow row in QuerySchema.Rows) { #>			
			result.<#= BuildPropertyName(row["ColumnName"].ToString()) #> = Utils.GetFieldValue<<#= GetNullableType(row["DataType"].ToString()) #>, <#= EntityName #>>(dataReader, <#= EntityName #>.PropertyNames.<#= BuildConstantPropertyName(row["ColumnName"].ToString()) #>, FieldNotFoundBehavior.ThrowException);
<# } #>	
			
			return result;
		}
						
		#endregion
		
		#region Controller especific methods
		
<# 

StringBuilder keyParametersBuilder = new StringBuilder(); 
StringBuilder keyListBuilder = new StringBuilder();

foreach (DataRow row in TableSchema.Select(string.Format("IsKey = '{0}'", true))) {
	if (keyParametersBuilder.Length > 0)
	{
		keyParametersBuilder.Append(", ");
		keyListBuilder.Append(", ");
	}
	
	keyParametersBuilder.AppendFormat("{0} {1}", row["DataType"].ToString(), BuildVariable(row["ColumnName"].ToString()));
	keyListBuilder.Append(BuildVariable(row["ColumnName"].ToString()));
}

#>

		private SearchParameterList GetKeyParameters(<#= keyParametersBuilder.ToString() #>)
		{
			SearchParameterList parameters = new SearchParameterList();
			
<# foreach (DataRow row in TableSchema.Select(string.Format("IsKey = '{0}'", true))) { #>	
			parameters.Add(Utils.BuildSearchParameter<<#= EntityName #>>(<#= EntityName #>.PropertyNames.<#= BuildConstantPropertyName(row["ColumnName"].ToString()) #>, <#= BuildVariable(row["ColumnName"].ToString()) #>, ComparisonOperator.Equal, BooleanOperator.And));
<# } #>				

			return parameters;
		}
		
		public int Delete(<#= keyParametersBuilder.ToString() #>)
		{
			return Delete(GetKeyParameters(<#= keyListBuilder.ToString() #>));
		}

		public <#= EntityName #> GetByKey(<#= keyParametersBuilder.ToString() #>)
		{
			List<<#= EntityName #>> result = GetList(GetKeyParameters(<#= keyListBuilder.ToString() #>));

			if (result.Count == 0)
			{
				ThrowNotFoundException();
			}

			return result[0];
		}			
		
		#endregion		
	}
}