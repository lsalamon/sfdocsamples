
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a allus Code Generator.
//     Runtime Version: 1.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//
//</auto-generated>
//------------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.Practices.EnterpriseLibrary.Data;
using System.Data.Common;
using System.Data;

using WebChat.Common.BE;


namespace WebChat.Logic.DAC
{

    public static class ChatConfigDAC
    {


        /// <summary>
        /// Obtiene un ChatConfig. 
        /// </summary>
        ///<param name="pChatConfig">Si se pasa nulll se retorna default</param>
        /// <returns>ChatConfigList</returns>
        /// <Date>2015-01-19T10:21:49</Date>
        /// <Author>moviedo</Author>
        public static ChatConfigBE GetByParam(Guid? chatConfigGuid)
        {
            Database dataBase = null;
            DbCommand cmd = null;


            ChatConfigList wChatConfigList = new ChatConfigList();
            ChatConfigBE wChatConfig = null;


            try
            {
                dataBase = DatabaseFactory.CreateDatabase(Common.Common.EpironChatLogs_CnnStringName);
                using (cmd = dataBase.GetStoredProcCommand("[Chat].[ChatConfig_g]"))
                {
                    if (chatConfigGuid.HasValue != false)
                        dataBase.AddInParameter(cmd, "ChatConfigGuid", System.Data.DbType.Guid, chatConfigGuid);

                    using (IDataReader reader = dataBase.ExecuteReader(cmd))
                    {
                        while (reader.Read())
                        {
                            wChatConfig = new ChatConfigBE();
                            wChatConfig.ChatConfigId = Convert.ToInt32(reader["ChatConfigId"]);
                            wChatConfig.ChatConfigName = reader["ChatConfigName"].ToString();
                            wChatConfig.ChatConfigCreated = Convert.ToDateTime(reader["ChatConfigCreated"]);
                            wChatConfig.ChatConfigTimeOut = Convert.ToInt32(reader["ChatConfigTimeOut"]);


                        }
                    }
                }
                return wChatConfig;

            }
            catch (Exception ex)
            {
                throw Fwk.Exceptions.ExceptionHelper.ProcessException(ex);
            }

        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public static List<ChatConfigBE> RetriveAll()
        {
            Database dataBase = null;
            DbCommand cmd = null;


            ChatConfigList wChatConfigList = new ChatConfigList();
            ChatConfigBE wChatConfig = null;


            try
            {
                dataBase = DatabaseFactory.CreateDatabase(Common.Common.EpironChatLogs_CnnStringName);
                using (cmd = dataBase.GetStoredProcCommand("[Chat].[ChatConfig_s]"))
                {

                    using (IDataReader reader = dataBase.ExecuteReader(cmd))
                    {
                        while (reader.Read())
                        {
                            wChatConfig = new ChatConfigBE();
                            wChatConfig.ChatConfigId = Convert.ToInt32(reader["ChatConfigId"]);
                            wChatConfig.ChatConfigName = reader["ChatConfigName"].ToString();
                            wChatConfig.ChatConfigCreated = Convert.ToDateTime(reader["ChatConfigCreated"]);
                            wChatConfig.ChatConfigTimeOut = Convert.ToInt32(reader["ChatConfigTimeOut"]);
                            wChatConfigList.Add(wChatConfig);

                        }
                    }
                }
                return wChatConfigList;

            }
            catch (Exception ex)
            {
                throw Fwk.Exceptions.ExceptionHelper.ProcessException(ex);
            }

        }
    }
}
        
 
    
