#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5446
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Fwk.SocialNetworks.Data
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="RedesSociales")]
	public partial class CoreDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPost(Post instance);
    partial void UpdatePost(Post instance);
    partial void DeletePost(Post instance);
    partial void InsertSocialNetwork(SocialNetwork instance);
    partial void UpdateSocialNetwork(SocialNetwork instance);
    partial void DeleteSocialNetwork(SocialNetwork instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertRecipient(Recipient instance);
    partial void UpdateRecipient(Recipient instance);
    partial void DeleteRecipient(Recipient instance);
    partial void InsertMessage(Message instance);
    partial void UpdateMessage(Message instance);
    partial void DeleteMessage(Message instance);
    partial void InsertSearch(Search instance);
    partial void UpdateSearch(Search instance);
    partial void DeleteSearch(Search instance);
    #endregion
		
		public CoreDataContext() : 
				base("Data Source=SANTANA\\SQLEXPRESS;Initial Catalog=RedesSociales;Integrated Security=" +
						"True", mappingSource)
		{
			OnCreated();
		}
		
		public CoreDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CoreDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CoreDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public CoreDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Post> Posts
		{
			get
			{
				return this.GetTable<Post>();
			}
		}
		
		public System.Data.Linq.Table<SocialNetwork> SocialNetworks
		{
			get
			{
				return this.GetTable<SocialNetwork>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<Recipient> Recipients
		{
			get
			{
				return this.GetTable<Recipient>();
			}
		}
		
		public System.Data.Linq.Table<Message> Messages
		{
			get
			{
				return this.GetTable<Message>();
			}
		}
		
		public System.Data.Linq.Table<Search> Searches
		{
			get
			{
				return this.GetTable<Search>();
			}
		}
	}
	
	[Table(Name="dbo.Post")]
	public partial class Post : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PostID;
		
		private string _Message;
		
		private System.DateTime _CreationDate;
		
		private int _FromUserID;
		
		private System.Nullable<int> _ToUserID;
		
		private string _SourcePostID;
		
		private int _SocialNetworkID;
		
		private string _AppSourceID;
		
		private string _Permlink;
		
		private System.Nullable<int> _ParentPostID;
		
		private EntitySet<Post> _Posts;
		
		private EntityRef<Post> _ParentPost;
		
		private EntityRef<SocialNetwork> _SocialNetwork;
		
		private EntityRef<User> _To;
		
		private EntityRef<User> _From;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPostIDChanging(int value);
    partial void OnPostIDChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnFromUserIDChanging(int value);
    partial void OnFromUserIDChanged();
    partial void OnToUserIDChanging(System.Nullable<int> value);
    partial void OnToUserIDChanged();
    partial void OnSourcePostIDChanging(string value);
    partial void OnSourcePostIDChanged();
    partial void OnSocialNetworkIDChanging(int value);
    partial void OnSocialNetworkIDChanged();
    partial void OnAppSourceIDChanging(string value);
    partial void OnAppSourceIDChanged();
    partial void OnPermlinkChanging(string value);
    partial void OnPermlinkChanged();
    partial void OnParentPostIDChanging(System.Nullable<int> value);
    partial void OnParentPostIDChanged();
    #endregion
		
		public Post()
		{
			this._Posts = new EntitySet<Post>(new Action<Post>(this.attach_Posts), new Action<Post>(this.detach_Posts));
			this._ParentPost = default(EntityRef<Post>);
			this._SocialNetwork = default(EntityRef<SocialNetwork>);
			this._To = default(EntityRef<User>);
			this._From = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_PostID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PostID
		{
			get
			{
				return this._PostID;
			}
			set
			{
				if ((this._PostID != value))
				{
					this.OnPostIDChanging(value);
					this.SendPropertyChanging();
					this._PostID = value;
					this.SendPropertyChanged("PostID");
					this.OnPostIDChanged();
				}
			}
		}
		
		[Column(Storage="_Message", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[Column(Storage="_CreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[Column(Storage="_FromUserID", DbType="Int NOT NULL")]
		public int FromUserID
		{
			get
			{
				return this._FromUserID;
			}
			set
			{
				if ((this._FromUserID != value))
				{
					if (this._From.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFromUserIDChanging(value);
					this.SendPropertyChanging();
					this._FromUserID = value;
					this.SendPropertyChanged("FromUserID");
					this.OnFromUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_ToUserID", DbType="Int")]
		public System.Nullable<int> ToUserID
		{
			get
			{
				return this._ToUserID;
			}
			set
			{
				if ((this._ToUserID != value))
				{
					if (this._To.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnToUserIDChanging(value);
					this.SendPropertyChanging();
					this._ToUserID = value;
					this.SendPropertyChanged("ToUserID");
					this.OnToUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_SourcePostID", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		public string SourcePostID
		{
			get
			{
				return this._SourcePostID;
			}
			set
			{
				if ((this._SourcePostID != value))
				{
					this.OnSourcePostIDChanging(value);
					this.SendPropertyChanging();
					this._SourcePostID = value;
					this.SendPropertyChanged("SourcePostID");
					this.OnSourcePostIDChanged();
				}
			}
		}
		
		[Column(Storage="_SocialNetworkID", DbType="Int NOT NULL")]
		public int SocialNetworkID
		{
			get
			{
				return this._SocialNetworkID;
			}
			set
			{
				if ((this._SocialNetworkID != value))
				{
					if (this._SocialNetwork.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSocialNetworkIDChanging(value);
					this.SendPropertyChanging();
					this._SocialNetworkID = value;
					this.SendPropertyChanged("SocialNetworkID");
					this.OnSocialNetworkIDChanged();
				}
			}
		}
		
		[Column(Storage="_AppSourceID", DbType="VarChar(100)")]
		public string AppSourceID
		{
			get
			{
				return this._AppSourceID;
			}
			set
			{
				if ((this._AppSourceID != value))
				{
					this.OnAppSourceIDChanging(value);
					this.SendPropertyChanging();
					this._AppSourceID = value;
					this.SendPropertyChanged("AppSourceID");
					this.OnAppSourceIDChanged();
				}
			}
		}
		
		[Column(Storage="_Permlink", DbType="VarChar(MAX)")]
		public string Permlink
		{
			get
			{
				return this._Permlink;
			}
			set
			{
				if ((this._Permlink != value))
				{
					this.OnPermlinkChanging(value);
					this.SendPropertyChanging();
					this._Permlink = value;
					this.SendPropertyChanged("Permlink");
					this.OnPermlinkChanged();
				}
			}
		}
		
		[Column(Storage="_ParentPostID", DbType="Int")]
		public System.Nullable<int> ParentPostID
		{
			get
			{
				return this._ParentPostID;
			}
			set
			{
				if ((this._ParentPostID != value))
				{
					if (this._ParentPost.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentPostIDChanging(value);
					this.SendPropertyChanging();
					this._ParentPostID = value;
					this.SendPropertyChanged("ParentPostID");
					this.OnParentPostIDChanged();
				}
			}
		}
		
		[Association(Name="Post_Post", Storage="_Posts", ThisKey="PostID", OtherKey="ParentPostID")]
		public EntitySet<Post> Posts
		{
			get
			{
				return this._Posts;
			}
			set
			{
				this._Posts.Assign(value);
			}
		}
		
		[Association(Name="Post_Post", Storage="_ParentPost", ThisKey="ParentPostID", OtherKey="PostID", IsForeignKey=true)]
		public Post ParentPost
		{
			get
			{
				return this._ParentPost.Entity;
			}
			set
			{
				Post previousValue = this._ParentPost.Entity;
				if (((previousValue != value) 
							|| (this._ParentPost.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ParentPost.Entity = null;
						previousValue.Posts.Remove(this);
					}
					this._ParentPost.Entity = value;
					if ((value != null))
					{
						value.Posts.Add(this);
						this._ParentPostID = value.PostID;
					}
					else
					{
						this._ParentPostID = default(Nullable<int>);
					}
					this.SendPropertyChanged("ParentPost");
				}
			}
		}
		
		[Association(Name="SocialNetwork_Post", Storage="_SocialNetwork", ThisKey="SocialNetworkID", OtherKey="SocialNetworkID", IsForeignKey=true)]
		public SocialNetwork SocialNetwork
		{
			get
			{
				return this._SocialNetwork.Entity;
			}
			set
			{
				SocialNetwork previousValue = this._SocialNetwork.Entity;
				if (((previousValue != value) 
							|| (this._SocialNetwork.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SocialNetwork.Entity = null;
						previousValue.Posts.Remove(this);
					}
					this._SocialNetwork.Entity = value;
					if ((value != null))
					{
						value.Posts.Add(this);
						this._SocialNetworkID = value.SocialNetworkID;
					}
					else
					{
						this._SocialNetworkID = default(int);
					}
					this.SendPropertyChanged("SocialNetwork");
				}
			}
		}
		
		[Association(Name="User_Post", Storage="_To", ThisKey="ToUserID", OtherKey="UserID", IsForeignKey=true)]
		public User To
		{
			get
			{
				return this._To.Entity;
			}
			set
			{
				User previousValue = this._To.Entity;
				if (((previousValue != value) 
							|| (this._To.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._To.Entity = null;
						previousValue.Posts.Remove(this);
					}
					this._To.Entity = value;
					if ((value != null))
					{
						value.Posts.Add(this);
						this._ToUserID = value.UserID;
					}
					else
					{
						this._ToUserID = default(Nullable<int>);
					}
					this.SendPropertyChanged("To");
				}
			}
		}
		
		[Association(Name="User_Post1", Storage="_From", ThisKey="FromUserID", OtherKey="UserID", IsForeignKey=true)]
		public User From
		{
			get
			{
				return this._From.Entity;
			}
			set
			{
				User previousValue = this._From.Entity;
				if (((previousValue != value) 
							|| (this._From.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._From.Entity = null;
						previousValue.UserPosts.Remove(this);
					}
					this._From.Entity = value;
					if ((value != null))
					{
						value.UserPosts.Add(this);
						this._FromUserID = value.UserID;
					}
					else
					{
						this._FromUserID = default(int);
					}
					this.SendPropertyChanged("From");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.ParentPost = this;
		}
		
		private void detach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.ParentPost = null;
		}
	}
	
	[Table(Name="dbo.SocialNetwork")]
	public partial class SocialNetwork : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SocialNetworkID;
		
		private string _SocialNetworkName;
		
		private bool _Active;
		
		private EntitySet<Post> _Posts;
		
		private EntitySet<User> _Users;
		
		private EntitySet<Message> _Messages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSocialNetworkIDChanging(int value);
    partial void OnSocialNetworkIDChanged();
    partial void OnSocialNetworkNameChanging(string value);
    partial void OnSocialNetworkNameChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    #endregion
		
		public SocialNetwork()
		{
			this._Posts = new EntitySet<Post>(new Action<Post>(this.attach_Posts), new Action<Post>(this.detach_Posts));
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			this._Messages = new EntitySet<Message>(new Action<Message>(this.attach_Messages), new Action<Message>(this.detach_Messages));
			OnCreated();
		}
		
		[Column(Storage="_SocialNetworkID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SocialNetworkID
		{
			get
			{
				return this._SocialNetworkID;
			}
			set
			{
				if ((this._SocialNetworkID != value))
				{
					this.OnSocialNetworkIDChanging(value);
					this.SendPropertyChanging();
					this._SocialNetworkID = value;
					this.SendPropertyChanged("SocialNetworkID");
					this.OnSocialNetworkIDChanged();
				}
			}
		}
		
		[Column(Storage="_SocialNetworkName", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string SocialNetworkName
		{
			get
			{
				return this._SocialNetworkName;
			}
			set
			{
				if ((this._SocialNetworkName != value))
				{
					this.OnSocialNetworkNameChanging(value);
					this.SendPropertyChanging();
					this._SocialNetworkName = value;
					this.SendPropertyChanged("SocialNetworkName");
					this.OnSocialNetworkNameChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Association(Name="SocialNetwork_Post", Storage="_Posts", ThisKey="SocialNetworkID", OtherKey="SocialNetworkID")]
		public EntitySet<Post> Posts
		{
			get
			{
				return this._Posts;
			}
			set
			{
				this._Posts.Assign(value);
			}
		}
		
		[Association(Name="SocialNetwork_User", Storage="_Users", ThisKey="SocialNetworkID", OtherKey="SocialNetworkID")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[Association(Name="SocialNetwork_Message", Storage="_Messages", ThisKey="SocialNetworkID", OtherKey="SocialNetworkID")]
		public EntitySet<Message> Messages
		{
			get
			{
				return this._Messages;
			}
			set
			{
				this._Messages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.SocialNetwork = this;
		}
		
		private void detach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.SocialNetwork = null;
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.SocialNetwork = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.SocialNetwork = null;
		}
		
		private void attach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.SocialNetwork = this;
		}
		
		private void detach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.SocialNetwork = null;
		}
	}
	
	[Table(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _UserName;
		
		private string _SourceUserID;
		
		private System.DateTime _CreationDate;
		
		private string _ImageUrl;
		
		private int _SocialNetworkID;
		
		private bool _Active;
		
		private string _Name;
		
		private int _ContactsCount;
		
		private EntitySet<Post> _Posts;
		
		private EntitySet<Post> _UserPosts;
		
		private EntitySet<Recipient> _Recipients;
		
		private EntitySet<Message> _Messages;
		
		private EntityRef<SocialNetwork> _SocialNetwork;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnSourceUserIDChanging(string value);
    partial void OnSourceUserIDChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnImageUrlChanging(string value);
    partial void OnImageUrlChanged();
    partial void OnSocialNetworkIDChanging(int value);
    partial void OnSocialNetworkIDChanged();
    partial void OnActiveChanging(bool value);
    partial void OnActiveChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFollowersChanging(int value);
    partial void OnFollowersChanged();
    #endregion
		
		public User()
		{
			this._Posts = new EntitySet<Post>(new Action<Post>(this.attach_Posts), new Action<Post>(this.detach_Posts));
			this._UserPosts = new EntitySet<Post>(new Action<Post>(this.attach_UserPosts), new Action<Post>(this.detach_UserPosts));
			this._Recipients = new EntitySet<Recipient>(new Action<Recipient>(this.attach_Recipients), new Action<Recipient>(this.detach_Recipients));
			this._Messages = new EntitySet<Message>(new Action<Message>(this.attach_Messages), new Action<Message>(this.detach_Messages));
			this._SocialNetwork = default(EntityRef<SocialNetwork>);
			OnCreated();
		}
		
		[Column(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserName", DbType="VarChar(256) NULL")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[Column(Storage="_SourceUserID", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		public string SourceUserID
		{
			get
			{
				return this._SourceUserID;
			}
			set
			{
				if ((this._SourceUserID != value))
				{
					this.OnSourceUserIDChanging(value);
					this.SendPropertyChanging();
					this._SourceUserID = value;
					this.SendPropertyChanged("SourceUserID");
					this.OnSourceUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_CreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[Column(Storage="_ImageUrl", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ImageUrl
		{
			get
			{
				return this._ImageUrl;
			}
			set
			{
				if ((this._ImageUrl != value))
				{
					this.OnImageUrlChanging(value);
					this.SendPropertyChanging();
					this._ImageUrl = value;
					this.SendPropertyChanged("ImageUrl");
					this.OnImageUrlChanged();
				}
			}
		}
		
		[Column(Storage="_SocialNetworkID", DbType="Int NOT NULL")]
		public int SocialNetworkID
		{
			get
			{
				return this._SocialNetworkID;
			}
			set
			{
				if ((this._SocialNetworkID != value))
				{
					if (this._SocialNetwork.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSocialNetworkIDChanging(value);
					this.SendPropertyChanging();
					this._SocialNetworkID = value;
					this.SendPropertyChanged("SocialNetworkID");
					this.OnSocialNetworkIDChanged();
				}
			}
		}
		
		[Column(Storage="_Active", DbType="Bit NOT NULL")]
		public bool Active
		{
			get
			{
				return this._Active;
			}
			set
			{
				if ((this._Active != value))
				{
					this.OnActiveChanging(value);
					this.SendPropertyChanging();
					this._Active = value;
					this.SendPropertyChanged("Active");
					this.OnActiveChanged();
				}
			}
		}
		
		[Column(Storage="_Name", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_ContactsCount", DbType="Int NOT NULL")]
		public int Followers
		{
			get
			{
				return this._ContactsCount;
			}
			set
			{
				if ((this._ContactsCount != value))
				{
					this.OnFollowersChanging(value);
					this.SendPropertyChanging();
					this._ContactsCount = value;
					this.SendPropertyChanged("Followers");
					this.OnFollowersChanged();
				}
			}
		}
		
		[Association(Name="User_Post", Storage="_Posts", ThisKey="UserID", OtherKey="ToUserID")]
		public EntitySet<Post> Posts
		{
			get
			{
				return this._Posts;
			}
			set
			{
				this._Posts.Assign(value);
			}
		}
		
		[Association(Name="User_Post1", Storage="_UserPosts", ThisKey="UserID", OtherKey="FromUserID")]
		public EntitySet<Post> UserPosts
		{
			get
			{
				return this._UserPosts;
			}
			set
			{
				this._UserPosts.Assign(value);
			}
		}
		
		[Association(Name="User_Recipient", Storage="_Recipients", ThisKey="UserID", OtherKey="RecipientUserID")]
		public EntitySet<Recipient> Recipients
		{
			get
			{
				return this._Recipients;
			}
			set
			{
				this._Recipients.Assign(value);
			}
		}
		
		[Association(Name="User_Message", Storage="_Messages", ThisKey="UserID", OtherKey="SenderUserID")]
		public EntitySet<Message> Messages
		{
			get
			{
				return this._Messages;
			}
			set
			{
				this._Messages.Assign(value);
			}
		}
		
		[Association(Name="SocialNetwork_User", Storage="_SocialNetwork", ThisKey="SocialNetworkID", OtherKey="SocialNetworkID", IsForeignKey=true)]
		public SocialNetwork SocialNetwork
		{
			get
			{
				return this._SocialNetwork.Entity;
			}
			set
			{
				SocialNetwork previousValue = this._SocialNetwork.Entity;
				if (((previousValue != value) 
							|| (this._SocialNetwork.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SocialNetwork.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._SocialNetwork.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._SocialNetworkID = value.SocialNetworkID;
					}
					else
					{
						this._SocialNetworkID = default(int);
					}
					this.SendPropertyChanged("SocialNetwork");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.To = this;
		}
		
		private void detach_Posts(Post entity)
		{
			this.SendPropertyChanging();
			entity.To = null;
		}
		
		private void attach_UserPosts(Post entity)
		{
			this.SendPropertyChanging();
			entity.From = this;
		}
		
		private void detach_UserPosts(Post entity)
		{
			this.SendPropertyChanging();
			entity.From = null;
		}
		
		private void attach_Recipients(Recipient entity)
		{
			this.SendPropertyChanging();
			entity.RecipientUser = this;
		}
		
		private void detach_Recipients(Recipient entity)
		{
			this.SendPropertyChanging();
			entity.RecipientUser = null;
		}
		
		private void attach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.SenderUser = this;
		}
		
		private void detach_Messages(Message entity)
		{
			this.SendPropertyChanging();
			entity.SenderUser = null;
		}
	}
	
	[Table(Name="dbo.Recipient")]
	public partial class Recipient : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MessageID;
		
		private int _RecipientUserID;
		
		private EntityRef<User> _User;
		
		private EntityRef<Message> _Message;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessageIDChanging(int value);
    partial void OnMessageIDChanged();
    partial void OnRecipientUserIDChanging(int value);
    partial void OnRecipientUserIDChanged();
    #endregion
		
		public Recipient()
		{
			this._User = default(EntityRef<User>);
			this._Message = default(EntityRef<Message>);
			OnCreated();
		}
		
		[Column(Storage="_MessageID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MessageID
		{
			get
			{
				return this._MessageID;
			}
			set
			{
				if ((this._MessageID != value))
				{
					if (this._Message.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMessageIDChanging(value);
					this.SendPropertyChanging();
					this._MessageID = value;
					this.SendPropertyChanged("MessageID");
					this.OnMessageIDChanged();
				}
			}
		}
		
		[Column(Storage="_RecipientUserID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RecipientUserID
		{
			get
			{
				return this._RecipientUserID;
			}
			set
			{
				if ((this._RecipientUserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecipientUserIDChanging(value);
					this.SendPropertyChanging();
					this._RecipientUserID = value;
					this.SendPropertyChanged("RecipientUserID");
					this.OnRecipientUserIDChanged();
				}
			}
		}
		
		[Association(Name="User_Recipient", Storage="_User", ThisKey="RecipientUserID", OtherKey="UserID", IsForeignKey=true)]
		public User RecipientUser
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Recipients.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Recipients.Add(this);
						this._RecipientUserID = value.UserID;
					}
					else
					{
						this._RecipientUserID = default(int);
					}
					this.SendPropertyChanged("RecipientUser");
				}
			}
		}
		
		[Association(Name="Message_Recipient", Storage="_Message", ThisKey="MessageID", OtherKey="MessageID", IsForeignKey=true)]
		public Message Message
		{
			get
			{
				return this._Message.Entity;
			}
			set
			{
				Message previousValue = this._Message.Entity;
				if (((previousValue != value) 
							|| (this._Message.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Message.Entity = null;
						previousValue.Recipients.Remove(this);
					}
					this._Message.Entity = value;
					if ((value != null))
					{
						value.Recipients.Add(this);
						this._MessageID = value.MessageID;
					}
					else
					{
						this._MessageID = default(int);
					}
					this.SendPropertyChanged("Message");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.Message")]
	public partial class Message : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MessageID;
		
		private string _SourceMessageID;
		
		private int _SenderUserID;
		
		private string _Text;
		
		private System.DateTime _CreatedDate;
		
		private int _SocialNetworkID;
		
		private string _Subject;
		
		private string _MailboxUserID;
		
		private EntitySet<Recipient> _Recipients;
		
		private EntityRef<SocialNetwork> _SocialNetwork;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMessageIDChanging(int value);
    partial void OnMessageIDChanged();
    partial void OnSourceMessageIDChanging(string value);
    partial void OnSourceMessageIDChanged();
    partial void OnSenderUserIDChanging(int value);
    partial void OnSenderUserIDChanged();
    partial void OnTextChanging(string value);
    partial void OnTextChanged();
    partial void OnCreatedDateChanging(System.DateTime value);
    partial void OnCreatedDateChanged();
    partial void OnSocialNetworkIDChanging(int value);
    partial void OnSocialNetworkIDChanged();
    partial void OnSubjectChanging(string value);
    partial void OnSubjectChanged();
    partial void OnMailboxUserIDChanging(string value);
    partial void OnMailboxUserIDChanged();
    #endregion
		
		public Message()
		{
			this._Recipients = new EntitySet<Recipient>(new Action<Recipient>(this.attach_Recipients), new Action<Recipient>(this.detach_Recipients));
			this._SocialNetwork = default(EntityRef<SocialNetwork>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[Column(Storage="_MessageID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int MessageID
		{
			get
			{
				return this._MessageID;
			}
			set
			{
				if ((this._MessageID != value))
				{
					this.OnMessageIDChanging(value);
					this.SendPropertyChanging();
					this._MessageID = value;
					this.SendPropertyChanged("MessageID");
					this.OnMessageIDChanged();
				}
			}
		}
		
		[Column(Storage="_SourceMessageID", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		public string SourceMessageID
		{
			get
			{
				return this._SourceMessageID;
			}
			set
			{
				if ((this._SourceMessageID != value))
				{
					this.OnSourceMessageIDChanging(value);
					this.SendPropertyChanging();
					this._SourceMessageID = value;
					this.SendPropertyChanged("SourceMessageID");
					this.OnSourceMessageIDChanged();
				}
			}
		}
		
		[Column(Storage="_SenderUserID", DbType="Int NOT NULL")]
		public int SenderUserID
		{
			get
			{
				return this._SenderUserID;
			}
			set
			{
				if ((this._SenderUserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSenderUserIDChanging(value);
					this.SendPropertyChanging();
					this._SenderUserID = value;
					this.SendPropertyChanged("SenderUserID");
					this.OnSenderUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_Text", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Text
		{
			get
			{
				return this._Text;
			}
			set
			{
				if ((this._Text != value))
				{
					this.OnTextChanging(value);
					this.SendPropertyChanging();
					this._Text = value;
					this.SendPropertyChanged("Text");
					this.OnTextChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[Column(Storage="_SocialNetworkID", DbType="Int NOT NULL")]
		public int SocialNetworkID
		{
			get
			{
				return this._SocialNetworkID;
			}
			set
			{
				if ((this._SocialNetworkID != value))
				{
					if (this._SocialNetwork.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSocialNetworkIDChanging(value);
					this.SendPropertyChanging();
					this._SocialNetworkID = value;
					this.SendPropertyChanged("SocialNetworkID");
					this.OnSocialNetworkIDChanged();
				}
			}
		}
		
		[Column(Storage="_Subject", CanBeNull=false)]
		public string Subject
		{
			get
			{
				return this._Subject;
			}
			set
			{
				if ((this._Subject != value))
				{
					this.OnSubjectChanging(value);
					this.SendPropertyChanging();
					this._Subject = value;
					this.SendPropertyChanged("Subject");
					this.OnSubjectChanged();
				}
			}
		}
		
		[Column(Storage="_MailboxUserID", DbType="VarChar(256) NOT NULL", CanBeNull=false)]
		public string MailboxUserID
		{
			get
			{
				return this._MailboxUserID;
			}
			set
			{
				if ((this._MailboxUserID != value))
				{
					this.OnMailboxUserIDChanging(value);
					this.SendPropertyChanging();
					this._MailboxUserID = value;
					this.SendPropertyChanged("MailboxUserID");
					this.OnMailboxUserIDChanged();
				}
			}
		}
		
		[Association(Name="Message_Recipient", Storage="_Recipients", ThisKey="MessageID", OtherKey="MessageID")]
		public EntitySet<Recipient> Recipients
		{
			get
			{
				return this._Recipients;
			}
			set
			{
				this._Recipients.Assign(value);
			}
		}
		
		[Association(Name="SocialNetwork_Message", Storage="_SocialNetwork", ThisKey="SocialNetworkID", OtherKey="SocialNetworkID", IsForeignKey=true)]
		public SocialNetwork SocialNetwork
		{
			get
			{
				return this._SocialNetwork.Entity;
			}
			set
			{
				SocialNetwork previousValue = this._SocialNetwork.Entity;
				if (((previousValue != value) 
							|| (this._SocialNetwork.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SocialNetwork.Entity = null;
						previousValue.Messages.Remove(this);
					}
					this._SocialNetwork.Entity = value;
					if ((value != null))
					{
						value.Messages.Add(this);
						this._SocialNetworkID = value.SocialNetworkID;
					}
					else
					{
						this._SocialNetworkID = default(int);
					}
					this.SendPropertyChanged("SocialNetwork");
				}
			}
		}
		
		[Association(Name="User_Message", Storage="_User", ThisKey="SenderUserID", OtherKey="UserID", IsForeignKey=true)]
		public User SenderUser
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.Messages.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.Messages.Add(this);
						this._SenderUserID = value.UserID;
					}
					else
					{
						this._SenderUserID = default(int);
					}
					this.SendPropertyChanged("SenderUser");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Recipients(Recipient entity)
		{
			this.SendPropertyChanging();
			entity.Message = this;
		}
		
		private void detach_Recipients(Recipient entity)
		{
			this.SendPropertyChanging();
			entity.Message = null;
		}
	}
	
	[Table(Name="dbo.Searches")]
	public partial class Search : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SearchId;
		
		private string _SourceSearchId;
		
		private string _Message;
		
		private System.DateTime _CreationDate;
		
		private int _FromUserID;
		
		private System.Nullable<int> _ToUserID;
		
		private int _SocialNetworkID;
		
		private string _AppSourceID;
		
		private System.Nullable<int> _ParentPostID;
		
		private string _Query;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSearchIdChanging(int value);
    partial void OnSearchIdChanged();
    partial void OnSourceSearchIdChanging(string value);
    partial void OnSourceSearchIdChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnCreationDateChanging(System.DateTime value);
    partial void OnCreationDateChanged();
    partial void OnFromUserIDChanging(int value);
    partial void OnFromUserIDChanged();
    partial void OnToUserIDChanging(System.Nullable<int> value);
    partial void OnToUserIDChanged();
    partial void OnSocialNetworkIDChanging(int value);
    partial void OnSocialNetworkIDChanged();
    partial void OnAppSourceIDChanging(string value);
    partial void OnAppSourceIDChanged();
    partial void OnParentPostIDChanging(System.Nullable<int> value);
    partial void OnParentPostIDChanged();
    partial void OnQueryChanging(string value);
    partial void OnQueryChanged();
    #endregion
		
		public Search()
		{
			OnCreated();
		}
		
		[Column(Storage="_SearchId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SearchId
		{
			get
			{
				return this._SearchId;
			}
			set
			{
				if ((this._SearchId != value))
				{
					this.OnSearchIdChanging(value);
					this.SendPropertyChanging();
					this._SearchId = value;
					this.SendPropertyChanged("SearchId");
					this.OnSearchIdChanged();
				}
			}
		}
		
		[Column(Storage="_SourceSearchId", DbType="Char(100)")]
		public string SourceSearchId
		{
			get
			{
				return this._SourceSearchId;
			}
			set
			{
				if ((this._SourceSearchId != value))
				{
					this.OnSourceSearchIdChanging(value);
					this.SendPropertyChanging();
					this._SourceSearchId = value;
					this.SendPropertyChanged("SourceSearchId");
					this.OnSourceSearchIdChanged();
				}
			}
		}
		
		[Column(Storage="_Message", DbType="VarChar(MAX)")]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[Column(Storage="_CreationDate", DbType="DateTime NOT NULL")]
		public System.DateTime CreationDate
		{
			get
			{
				return this._CreationDate;
			}
			set
			{
				if ((this._CreationDate != value))
				{
					this.OnCreationDateChanging(value);
					this.SendPropertyChanging();
					this._CreationDate = value;
					this.SendPropertyChanged("CreationDate");
					this.OnCreationDateChanged();
				}
			}
		}
		
		[Column(Storage="_FromUserID", DbType="Int NOT NULL")]
		public int FromUserID
		{
			get
			{
				return this._FromUserID;
			}
			set
			{
				if ((this._FromUserID != value))
				{
					this.OnFromUserIDChanging(value);
					this.SendPropertyChanging();
					this._FromUserID = value;
					this.SendPropertyChanged("FromUserID");
					this.OnFromUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_ToUserID", DbType="Int")]
		public System.Nullable<int> ToUserID
		{
			get
			{
				return this._ToUserID;
			}
			set
			{
				if ((this._ToUserID != value))
				{
					this.OnToUserIDChanging(value);
					this.SendPropertyChanging();
					this._ToUserID = value;
					this.SendPropertyChanged("ToUserID");
					this.OnToUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_SocialNetworkID", DbType="Int NOT NULL")]
		public int SocialNetworkID
		{
			get
			{
				return this._SocialNetworkID;
			}
			set
			{
				if ((this._SocialNetworkID != value))
				{
					this.OnSocialNetworkIDChanging(value);
					this.SendPropertyChanging();
					this._SocialNetworkID = value;
					this.SendPropertyChanged("SocialNetworkID");
					this.OnSocialNetworkIDChanged();
				}
			}
		}
		
		[Column(Storage="_AppSourceID", DbType="VarChar(100)")]
		public string AppSourceID
		{
			get
			{
				return this._AppSourceID;
			}
			set
			{
				if ((this._AppSourceID != value))
				{
					this.OnAppSourceIDChanging(value);
					this.SendPropertyChanging();
					this._AppSourceID = value;
					this.SendPropertyChanged("AppSourceID");
					this.OnAppSourceIDChanged();
				}
			}
		}
		
		[Column(Storage="_ParentPostID", DbType="Int")]
		public System.Nullable<int> ParentPostID
		{
			get
			{
				return this._ParentPostID;
			}
			set
			{
				if ((this._ParentPostID != value))
				{
					this.OnParentPostIDChanging(value);
					this.SendPropertyChanging();
					this._ParentPostID = value;
					this.SendPropertyChanged("ParentPostID");
					this.OnParentPostIDChanged();
				}
			}
		}
		
		[Column(Storage="_Query", DbType="Char(30)")]
		public string Query
		{
			get
			{
				return this._Query;
			}
			set
			{
				if ((this._Query != value))
				{
					this.OnQueryChanging(value);
					this.SendPropertyChanging();
					this._Query = value;
					this.SendPropertyChanged("Query");
					this.OnQueryChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
