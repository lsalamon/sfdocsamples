#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestPerformanceLinQ.BackEnd.BE
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="AdventureWorks")]
	public partial class SalesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertSalesOrderHeader(SalesOrderHeader instance);
    partial void UpdateSalesOrderHeader(SalesOrderHeader instance);
    partial void DeleteSalesOrderHeader(SalesOrderHeader instance);
    partial void InsertSalesOrderDetail(SalesOrderDetail instance);
    partial void UpdateSalesOrderDetail(SalesOrderDetail instance);
    partial void DeleteSalesOrderDetail(SalesOrderDetail instance);
    partial void InsertSalesPerson(SalesPerson instance);
    partial void UpdateSalesPerson(SalesPerson instance);
    partial void DeleteSalesPerson(SalesPerson instance);
    partial void InsertSalesTerritory(SalesTerritory instance);
    partial void UpdateSalesTerritory(SalesTerritory instance);
    partial void DeleteSalesTerritory(SalesTerritory instance);
    #endregion
		
		public SalesDataContext() : 
				base(global::TestPerformanceLinQ.BackEnd.Properties.Settings.Default.AdventureWorksConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SalesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SalesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SalesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SalesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<SalesOrderHeader> SalesOrderHeaders
		{
			get
			{
				return this.GetTable<SalesOrderHeader>();
			}
		}
		
		public System.Data.Linq.Table<SalesOrderDetail> SalesOrderDetails
		{
			get
			{
				return this.GetTable<SalesOrderDetail>();
			}
		}
		
		public System.Data.Linq.Table<SalesPerson> SalesPersons
		{
			get
			{
				return this.GetTable<SalesPerson>();
			}
		}
		
		public System.Data.Linq.Table<SalesTerritory> SalesTerritories
		{
			get
			{
				return this.GetTable<SalesTerritory>();
			}
		}
	}
	
	[Table(Name="Sales.SalesOrderHeader")]
	public partial class SalesOrderHeader : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SalesOrderID;
		
		private byte _RevisionNumber;
		
		private System.DateTime _OrderDate;
		
		private System.DateTime _DueDate;
		
		private System.Nullable<System.DateTime> _ShipDate;
		
		private byte _Status;
		
		private bool _OnlineOrderFlag;
		
		private string _SalesOrderNumber;
		
		private string _PurchaseOrderNumber;
		
		private string _AccountNumber;
		
		private int _CustomerID;
		
		private int _ContactID;
		
		private System.Nullable<int> _SalesPersonID;
		
		private System.Nullable<int> _TerritoryID;
		
		private int _BillToAddressID;
		
		private int _ShipToAddressID;
		
		private int _ShipMethodID;
		
		private System.Nullable<int> _CreditCardID;
		
		private string _CreditCardApprovalCode;
		
		private System.Nullable<int> _CurrencyRateID;
		
		private decimal _SubTotal;
		
		private decimal _TaxAmt;
		
		private decimal _Freight;
		
		private decimal _TotalDue;
		
		private string _Comment;
		
		private EntitySet<SalesOrderDetail> _SalesOrderDetails;
		
		private EntityRef<SalesPerson> _SalesPerson;
		
		private EntityRef<SalesTerritory> _SalesTerritory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSalesOrderIDChanging(int value);
    partial void OnSalesOrderIDChanged();
    partial void OnRevisionNumberChanging(byte value);
    partial void OnRevisionNumberChanged();
    partial void OnOrderDateChanging(System.DateTime value);
    partial void OnOrderDateChanged();
    partial void OnDueDateChanging(System.DateTime value);
    partial void OnDueDateChanged();
    partial void OnShipDateChanging(System.Nullable<System.DateTime> value);
    partial void OnShipDateChanged();
    partial void OnStatusChanging(byte value);
    partial void OnStatusChanged();
    partial void OnOnlineOrderFlagChanging(bool value);
    partial void OnOnlineOrderFlagChanged();
    partial void OnSalesOrderNumberChanging(string value);
    partial void OnSalesOrderNumberChanged();
    partial void OnPurchaseOrderNumberChanging(string value);
    partial void OnPurchaseOrderNumberChanged();
    partial void OnAccountNumberChanging(string value);
    partial void OnAccountNumberChanged();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnContactIDChanging(int value);
    partial void OnContactIDChanged();
    partial void OnSalesPersonIDChanging(System.Nullable<int> value);
    partial void OnSalesPersonIDChanged();
    partial void OnTerritoryIDChanging(System.Nullable<int> value);
    partial void OnTerritoryIDChanged();
    partial void OnBillToAddressIDChanging(int value);
    partial void OnBillToAddressIDChanged();
    partial void OnShipToAddressIDChanging(int value);
    partial void OnShipToAddressIDChanged();
    partial void OnShipMethodIDChanging(int value);
    partial void OnShipMethodIDChanged();
    partial void OnCreditCardIDChanging(System.Nullable<int> value);
    partial void OnCreditCardIDChanged();
    partial void OnCreditCardApprovalCodeChanging(string value);
    partial void OnCreditCardApprovalCodeChanged();
    partial void OnCurrencyRateIDChanging(System.Nullable<int> value);
    partial void OnCurrencyRateIDChanged();
    partial void OnSubTotalChanging(decimal value);
    partial void OnSubTotalChanged();
    partial void OnTaxAmtChanging(decimal value);
    partial void OnTaxAmtChanged();
    partial void OnFreightChanging(decimal value);
    partial void OnFreightChanged();
    partial void OnTotalDueChanging(decimal value);
    partial void OnTotalDueChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    #endregion
		
		public SalesOrderHeader()
		{
			this._SalesOrderDetails = new EntitySet<SalesOrderDetail>(new Action<SalesOrderDetail>(this.attach_SalesOrderDetails), new Action<SalesOrderDetail>(this.detach_SalesOrderDetails));
			this._SalesPerson = default(EntityRef<SalesPerson>);
			this._SalesTerritory = default(EntityRef<SalesTerritory>);
			OnCreated();
		}
		
		[Column(Storage="_SalesOrderID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SalesOrderID
		{
			get
			{
				return this._SalesOrderID;
			}
			set
			{
				if ((this._SalesOrderID != value))
				{
					this.OnSalesOrderIDChanging(value);
					this.SendPropertyChanging();
					this._SalesOrderID = value;
					this.SendPropertyChanged("SalesOrderID");
					this.OnSalesOrderIDChanged();
				}
			}
		}
		
		[Column(Storage="_RevisionNumber", DbType="TinyInt NOT NULL")]
		public byte RevisionNumber
		{
			get
			{
				return this._RevisionNumber;
			}
			set
			{
				if ((this._RevisionNumber != value))
				{
					this.OnRevisionNumberChanging(value);
					this.SendPropertyChanging();
					this._RevisionNumber = value;
					this.SendPropertyChanged("RevisionNumber");
					this.OnRevisionNumberChanged();
				}
			}
		}
		
		[Column(Storage="_OrderDate", DbType="DateTime NOT NULL")]
		public System.DateTime OrderDate
		{
			get
			{
				return this._OrderDate;
			}
			set
			{
				if ((this._OrderDate != value))
				{
					this.OnOrderDateChanging(value);
					this.SendPropertyChanging();
					this._OrderDate = value;
					this.SendPropertyChanged("OrderDate");
					this.OnOrderDateChanged();
				}
			}
		}
		
		[Column(Storage="_DueDate", DbType="DateTime NOT NULL")]
		public System.DateTime DueDate
		{
			get
			{
				return this._DueDate;
			}
			set
			{
				if ((this._DueDate != value))
				{
					this.OnDueDateChanging(value);
					this.SendPropertyChanging();
					this._DueDate = value;
					this.SendPropertyChanged("DueDate");
					this.OnDueDateChanged();
				}
			}
		}
		
		[Column(Storage="_ShipDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> ShipDate
		{
			get
			{
				return this._ShipDate;
			}
			set
			{
				if ((this._ShipDate != value))
				{
					this.OnShipDateChanging(value);
					this.SendPropertyChanging();
					this._ShipDate = value;
					this.SendPropertyChanged("ShipDate");
					this.OnShipDateChanged();
				}
			}
		}
		
		[Column(Storage="_Status", DbType="TinyInt NOT NULL")]
		public byte Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[Column(Storage="_OnlineOrderFlag", DbType="Bit NOT NULL")]
		public bool OnlineOrderFlag
		{
			get
			{
				return this._OnlineOrderFlag;
			}
			set
			{
				if ((this._OnlineOrderFlag != value))
				{
					this.OnOnlineOrderFlagChanging(value);
					this.SendPropertyChanging();
					this._OnlineOrderFlag = value;
					this.SendPropertyChanged("OnlineOrderFlag");
					this.OnOnlineOrderFlagChanged();
				}
			}
		}
		
		[Column(Storage="_SalesOrderNumber", AutoSync=AutoSync.Always, DbType="NVarChar(25) NOT NULL", CanBeNull=false, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public string SalesOrderNumber
		{
			get
			{
				return this._SalesOrderNumber;
			}
			set
			{
				if ((this._SalesOrderNumber != value))
				{
					this.OnSalesOrderNumberChanging(value);
					this.SendPropertyChanging();
					this._SalesOrderNumber = value;
					this.SendPropertyChanged("SalesOrderNumber");
					this.OnSalesOrderNumberChanged();
				}
			}
		}
		
		[Column(Storage="_PurchaseOrderNumber", DbType="NVarChar(25)")]
		public string PurchaseOrderNumber
		{
			get
			{
				return this._PurchaseOrderNumber;
			}
			set
			{
				if ((this._PurchaseOrderNumber != value))
				{
					this.OnPurchaseOrderNumberChanging(value);
					this.SendPropertyChanging();
					this._PurchaseOrderNumber = value;
					this.SendPropertyChanged("PurchaseOrderNumber");
					this.OnPurchaseOrderNumberChanged();
				}
			}
		}
		
		[Column(Storage="_AccountNumber", DbType="NVarChar(15)")]
		public string AccountNumber
		{
			get
			{
				return this._AccountNumber;
			}
			set
			{
				if ((this._AccountNumber != value))
				{
					this.OnAccountNumberChanging(value);
					this.SendPropertyChanging();
					this._AccountNumber = value;
					this.SendPropertyChanged("AccountNumber");
					this.OnAccountNumberChanged();
				}
			}
		}
		
		[Column(Storage="_CustomerID", DbType="Int NOT NULL")]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[Column(Storage="_ContactID", DbType="Int NOT NULL")]
		public int ContactID
		{
			get
			{
				return this._ContactID;
			}
			set
			{
				if ((this._ContactID != value))
				{
					this.OnContactIDChanging(value);
					this.SendPropertyChanging();
					this._ContactID = value;
					this.SendPropertyChanged("ContactID");
					this.OnContactIDChanged();
				}
			}
		}
		
		[Column(Storage="_SalesPersonID", DbType="Int")]
		public System.Nullable<int> SalesPersonID
		{
			get
			{
				return this._SalesPersonID;
			}
			set
			{
				if ((this._SalesPersonID != value))
				{
					if (this._SalesPerson.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSalesPersonIDChanging(value);
					this.SendPropertyChanging();
					this._SalesPersonID = value;
					this.SendPropertyChanged("SalesPersonID");
					this.OnSalesPersonIDChanged();
				}
			}
		}
		
		[Column(Storage="_TerritoryID", DbType="Int")]
		public System.Nullable<int> TerritoryID
		{
			get
			{
				return this._TerritoryID;
			}
			set
			{
				if ((this._TerritoryID != value))
				{
					if (this._SalesTerritory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTerritoryIDChanging(value);
					this.SendPropertyChanging();
					this._TerritoryID = value;
					this.SendPropertyChanged("TerritoryID");
					this.OnTerritoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_BillToAddressID", DbType="Int NOT NULL")]
		public int BillToAddressID
		{
			get
			{
				return this._BillToAddressID;
			}
			set
			{
				if ((this._BillToAddressID != value))
				{
					this.OnBillToAddressIDChanging(value);
					this.SendPropertyChanging();
					this._BillToAddressID = value;
					this.SendPropertyChanged("BillToAddressID");
					this.OnBillToAddressIDChanged();
				}
			}
		}
		
		[Column(Storage="_ShipToAddressID", DbType="Int NOT NULL")]
		public int ShipToAddressID
		{
			get
			{
				return this._ShipToAddressID;
			}
			set
			{
				if ((this._ShipToAddressID != value))
				{
					this.OnShipToAddressIDChanging(value);
					this.SendPropertyChanging();
					this._ShipToAddressID = value;
					this.SendPropertyChanged("ShipToAddressID");
					this.OnShipToAddressIDChanged();
				}
			}
		}
		
		[Column(Storage="_ShipMethodID", DbType="Int NOT NULL")]
		public int ShipMethodID
		{
			get
			{
				return this._ShipMethodID;
			}
			set
			{
				if ((this._ShipMethodID != value))
				{
					this.OnShipMethodIDChanging(value);
					this.SendPropertyChanging();
					this._ShipMethodID = value;
					this.SendPropertyChanged("ShipMethodID");
					this.OnShipMethodIDChanged();
				}
			}
		}
		
		[Column(Storage="_CreditCardID", DbType="Int")]
		public System.Nullable<int> CreditCardID
		{
			get
			{
				return this._CreditCardID;
			}
			set
			{
				if ((this._CreditCardID != value))
				{
					this.OnCreditCardIDChanging(value);
					this.SendPropertyChanging();
					this._CreditCardID = value;
					this.SendPropertyChanged("CreditCardID");
					this.OnCreditCardIDChanged();
				}
			}
		}
		
		[Column(Storage="_CreditCardApprovalCode", DbType="VarChar(15)")]
		public string CreditCardApprovalCode
		{
			get
			{
				return this._CreditCardApprovalCode;
			}
			set
			{
				if ((this._CreditCardApprovalCode != value))
				{
					this.OnCreditCardApprovalCodeChanging(value);
					this.SendPropertyChanging();
					this._CreditCardApprovalCode = value;
					this.SendPropertyChanged("CreditCardApprovalCode");
					this.OnCreditCardApprovalCodeChanged();
				}
			}
		}
		
		[Column(Storage="_CurrencyRateID", DbType="Int")]
		public System.Nullable<int> CurrencyRateID
		{
			get
			{
				return this._CurrencyRateID;
			}
			set
			{
				if ((this._CurrencyRateID != value))
				{
					this.OnCurrencyRateIDChanging(value);
					this.SendPropertyChanging();
					this._CurrencyRateID = value;
					this.SendPropertyChanged("CurrencyRateID");
					this.OnCurrencyRateIDChanged();
				}
			}
		}
		
		[Column(Storage="_SubTotal", DbType="Money NOT NULL")]
		public decimal SubTotal
		{
			get
			{
				return this._SubTotal;
			}
			set
			{
				if ((this._SubTotal != value))
				{
					this.OnSubTotalChanging(value);
					this.SendPropertyChanging();
					this._SubTotal = value;
					this.SendPropertyChanged("SubTotal");
					this.OnSubTotalChanged();
				}
			}
		}
		
		[Column(Storage="_TaxAmt", DbType="Money NOT NULL")]
		public decimal TaxAmt
		{
			get
			{
				return this._TaxAmt;
			}
			set
			{
				if ((this._TaxAmt != value))
				{
					this.OnTaxAmtChanging(value);
					this.SendPropertyChanging();
					this._TaxAmt = value;
					this.SendPropertyChanged("TaxAmt");
					this.OnTaxAmtChanged();
				}
			}
		}
		
		[Column(Storage="_Freight", DbType="Money NOT NULL")]
		public decimal Freight
		{
			get
			{
				return this._Freight;
			}
			set
			{
				if ((this._Freight != value))
				{
					this.OnFreightChanging(value);
					this.SendPropertyChanging();
					this._Freight = value;
					this.SendPropertyChanged("Freight");
					this.OnFreightChanged();
				}
			}
		}
		
		[Column(Storage="_TotalDue", AutoSync=AutoSync.Always, DbType="Money NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public decimal TotalDue
		{
			get
			{
				return this._TotalDue;
			}
			set
			{
				if ((this._TotalDue != value))
				{
					this.OnTotalDueChanging(value);
					this.SendPropertyChanging();
					this._TotalDue = value;
					this.SendPropertyChanged("TotalDue");
					this.OnTotalDueChanged();
				}
			}
		}
		
		[Column(Storage="_Comment", DbType="NVarChar(128)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[Association(Name="SalesOrderHeader_SalesOrderDetail", Storage="_SalesOrderDetails", OtherKey="SalesOrderID")]
		public EntitySet<SalesOrderDetail> SalesOrderDetails
		{
			get
			{
				return this._SalesOrderDetails;
			}
			set
			{
				this._SalesOrderDetails.Assign(value);
			}
		}
		
		[Association(Name="SalesPerson_SalesOrderHeader", Storage="_SalesPerson", ThisKey="SalesPersonID", IsForeignKey=true)]
		public SalesPerson SalesPerson
		{
			get
			{
				return this._SalesPerson.Entity;
			}
			set
			{
				SalesPerson previousValue = this._SalesPerson.Entity;
				if (((previousValue != value) 
							|| (this._SalesPerson.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SalesPerson.Entity = null;
						previousValue.SalesOrderHeaders.Remove(this);
					}
					this._SalesPerson.Entity = value;
					if ((value != null))
					{
						value.SalesOrderHeaders.Add(this);
						this._SalesPersonID = value.SalesPersonID;
					}
					else
					{
						this._SalesPersonID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SalesPerson");
				}
			}
		}
		
		[Association(Name="SalesTerritory_SalesOrderHeader", Storage="_SalesTerritory", ThisKey="TerritoryID", IsForeignKey=true)]
		public SalesTerritory SalesTerritory
		{
			get
			{
				return this._SalesTerritory.Entity;
			}
			set
			{
				SalesTerritory previousValue = this._SalesTerritory.Entity;
				if (((previousValue != value) 
							|| (this._SalesTerritory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SalesTerritory.Entity = null;
						previousValue.SalesOrderHeaders.Remove(this);
					}
					this._SalesTerritory.Entity = value;
					if ((value != null))
					{
						value.SalesOrderHeaders.Add(this);
						this._TerritoryID = value.TerritoryID;
					}
					else
					{
						this._TerritoryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SalesTerritory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SalesOrderDetails(SalesOrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.SalesOrderHeader = this;
		}
		
		private void detach_SalesOrderDetails(SalesOrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.SalesOrderHeader = null;
		}
	}
	
	[Table(Name="Sales.SalesOrderDetail")]
	public partial class SalesOrderDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SalesOrderID;
		
		private int _SalesOrderDetailID;
		
		private string _CarrierTrackingNumber;
		
		private short _OrderQty;
		
		private int _ProductID;
		
		private int _SpecialOfferID;
		
		private decimal _UnitPrice;
		
		private decimal _UnitPriceDiscount;
		
		private decimal _LineTotal;
		
		private System.DateTime _ModifiedDate;
		
		private EntityRef<SalesOrderHeader> _SalesOrderHeader;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSalesOrderIDChanging(int value);
    partial void OnSalesOrderIDChanged();
    partial void OnSalesOrderDetailIDChanging(int value);
    partial void OnSalesOrderDetailIDChanged();
    partial void OnCarrierTrackingNumberChanging(string value);
    partial void OnCarrierTrackingNumberChanged();
    partial void OnOrderQtyChanging(short value);
    partial void OnOrderQtyChanged();
    partial void OnProductIDChanging(int value);
    partial void OnProductIDChanged();
    partial void OnSpecialOfferIDChanging(int value);
    partial void OnSpecialOfferIDChanged();
    partial void OnUnitPriceChanging(decimal value);
    partial void OnUnitPriceChanged();
    partial void OnUnitPriceDiscountChanging(decimal value);
    partial void OnUnitPriceDiscountChanged();
    partial void OnLineTotalChanging(decimal value);
    partial void OnLineTotalChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public SalesOrderDetail()
		{
			this._SalesOrderHeader = default(EntityRef<SalesOrderHeader>);
			OnCreated();
		}
		
		[Column(Storage="_SalesOrderID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SalesOrderID
		{
			get
			{
				return this._SalesOrderID;
			}
			set
			{
				if ((this._SalesOrderID != value))
				{
					if (this._SalesOrderHeader.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSalesOrderIDChanging(value);
					this.SendPropertyChanging();
					this._SalesOrderID = value;
					this.SendPropertyChanged("SalesOrderID");
					this.OnSalesOrderIDChanged();
				}
			}
		}
		
		[Column(Storage="_SalesOrderDetailID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SalesOrderDetailID
		{
			get
			{
				return this._SalesOrderDetailID;
			}
			set
			{
				if ((this._SalesOrderDetailID != value))
				{
					this.OnSalesOrderDetailIDChanging(value);
					this.SendPropertyChanging();
					this._SalesOrderDetailID = value;
					this.SendPropertyChanged("SalesOrderDetailID");
					this.OnSalesOrderDetailIDChanged();
				}
			}
		}
		
		[Column(Storage="_CarrierTrackingNumber", DbType="NVarChar(25)")]
		public string CarrierTrackingNumber
		{
			get
			{
				return this._CarrierTrackingNumber;
			}
			set
			{
				if ((this._CarrierTrackingNumber != value))
				{
					this.OnCarrierTrackingNumberChanging(value);
					this.SendPropertyChanging();
					this._CarrierTrackingNumber = value;
					this.SendPropertyChanged("CarrierTrackingNumber");
					this.OnCarrierTrackingNumberChanged();
				}
			}
		}
		
		[Column(Storage="_OrderQty", DbType="SmallInt NOT NULL")]
		public short OrderQty
		{
			get
			{
				return this._OrderQty;
			}
			set
			{
				if ((this._OrderQty != value))
				{
					this.OnOrderQtyChanging(value);
					this.SendPropertyChanging();
					this._OrderQty = value;
					this.SendPropertyChanged("OrderQty");
					this.OnOrderQtyChanged();
				}
			}
		}
		
		[Column(Storage="_ProductID", DbType="Int NOT NULL")]
		public int ProductID
		{
			get
			{
				return this._ProductID;
			}
			set
			{
				if ((this._ProductID != value))
				{
					this.OnProductIDChanging(value);
					this.SendPropertyChanging();
					this._ProductID = value;
					this.SendPropertyChanged("ProductID");
					this.OnProductIDChanged();
				}
			}
		}
		
		[Column(Storage="_SpecialOfferID", DbType="Int NOT NULL")]
		public int SpecialOfferID
		{
			get
			{
				return this._SpecialOfferID;
			}
			set
			{
				if ((this._SpecialOfferID != value))
				{
					this.OnSpecialOfferIDChanging(value);
					this.SendPropertyChanging();
					this._SpecialOfferID = value;
					this.SendPropertyChanged("SpecialOfferID");
					this.OnSpecialOfferIDChanged();
				}
			}
		}
		
		[Column(Storage="_UnitPrice", DbType="Money NOT NULL")]
		public decimal UnitPrice
		{
			get
			{
				return this._UnitPrice;
			}
			set
			{
				if ((this._UnitPrice != value))
				{
					this.OnUnitPriceChanging(value);
					this.SendPropertyChanging();
					this._UnitPrice = value;
					this.SendPropertyChanged("UnitPrice");
					this.OnUnitPriceChanged();
				}
			}
		}
		
		[Column(Storage="_UnitPriceDiscount", DbType="Money NOT NULL")]
		public decimal UnitPriceDiscount
		{
			get
			{
				return this._UnitPriceDiscount;
			}
			set
			{
				if ((this._UnitPriceDiscount != value))
				{
					this.OnUnitPriceDiscountChanging(value);
					this.SendPropertyChanging();
					this._UnitPriceDiscount = value;
					this.SendPropertyChanged("UnitPriceDiscount");
					this.OnUnitPriceDiscountChanged();
				}
			}
		}
		
		[Column(Storage="_LineTotal", AutoSync=AutoSync.Always, DbType="Decimal(38,6) NOT NULL", IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public decimal LineTotal
		{
			get
			{
				return this._LineTotal;
			}
			set
			{
				if ((this._LineTotal != value))
				{
					this.OnLineTotalChanging(value);
					this.SendPropertyChanging();
					this._LineTotal = value;
					this.SendPropertyChanged("LineTotal");
					this.OnLineTotalChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Association(Name="SalesOrderHeader_SalesOrderDetail", Storage="_SalesOrderHeader", ThisKey="SalesOrderID", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public SalesOrderHeader SalesOrderHeader
		{
			get
			{
				return this._SalesOrderHeader.Entity;
			}
			set
			{
				SalesOrderHeader previousValue = this._SalesOrderHeader.Entity;
				if (((previousValue != value) 
							|| (this._SalesOrderHeader.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SalesOrderHeader.Entity = null;
						previousValue.SalesOrderDetails.Remove(this);
					}
					this._SalesOrderHeader.Entity = value;
					if ((value != null))
					{
						value.SalesOrderDetails.Add(this);
						this._SalesOrderID = value.SalesOrderID;
					}
					else
					{
						this._SalesOrderID = default(int);
					}
					this.SendPropertyChanged("SalesOrderHeader");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="Sales.SalesPerson")]
	public partial class SalesPerson : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SalesPersonID;
		
		private System.Nullable<int> _TerritoryID;
		
		private System.Nullable<decimal> _SalesQuota;
		
		private decimal _Bonus;
		
		private decimal _CommissionPct;
		
		private decimal _SalesYTD;
		
		private decimal _SalesLastYear;
		
		private System.Guid _rowguid;
		
		private System.DateTime _ModifiedDate;
		
		private EntitySet<SalesOrderHeader> _SalesOrderHeaders;
		
		private EntityRef<SalesTerritory> _SalesTerritory;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSalesPersonIDChanging(int value);
    partial void OnSalesPersonIDChanged();
    partial void OnTerritoryIDChanging(System.Nullable<int> value);
    partial void OnTerritoryIDChanged();
    partial void OnSalesQuotaChanging(System.Nullable<decimal> value);
    partial void OnSalesQuotaChanged();
    partial void OnBonusChanging(decimal value);
    partial void OnBonusChanged();
    partial void OnCommissionPctChanging(decimal value);
    partial void OnCommissionPctChanged();
    partial void OnSalesYTDChanging(decimal value);
    partial void OnSalesYTDChanged();
    partial void OnSalesLastYearChanging(decimal value);
    partial void OnSalesLastYearChanged();
    partial void OnrowguidChanging(System.Guid value);
    partial void OnrowguidChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public SalesPerson()
		{
			this._SalesOrderHeaders = new EntitySet<SalesOrderHeader>(new Action<SalesOrderHeader>(this.attach_SalesOrderHeaders), new Action<SalesOrderHeader>(this.detach_SalesOrderHeaders));
			this._SalesTerritory = default(EntityRef<SalesTerritory>);
			OnCreated();
		}
		
		[Column(Storage="_SalesPersonID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SalesPersonID
		{
			get
			{
				return this._SalesPersonID;
			}
			set
			{
				if ((this._SalesPersonID != value))
				{
					this.OnSalesPersonIDChanging(value);
					this.SendPropertyChanging();
					this._SalesPersonID = value;
					this.SendPropertyChanged("SalesPersonID");
					this.OnSalesPersonIDChanged();
				}
			}
		}
		
		[Column(Storage="_TerritoryID", DbType="Int")]
		public System.Nullable<int> TerritoryID
		{
			get
			{
				return this._TerritoryID;
			}
			set
			{
				if ((this._TerritoryID != value))
				{
					if (this._SalesTerritory.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTerritoryIDChanging(value);
					this.SendPropertyChanging();
					this._TerritoryID = value;
					this.SendPropertyChanged("TerritoryID");
					this.OnTerritoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_SalesQuota", DbType="Money")]
		public System.Nullable<decimal> SalesQuota
		{
			get
			{
				return this._SalesQuota;
			}
			set
			{
				if ((this._SalesQuota != value))
				{
					this.OnSalesQuotaChanging(value);
					this.SendPropertyChanging();
					this._SalesQuota = value;
					this.SendPropertyChanged("SalesQuota");
					this.OnSalesQuotaChanged();
				}
			}
		}
		
		[Column(Storage="_Bonus", DbType="Money NOT NULL")]
		public decimal Bonus
		{
			get
			{
				return this._Bonus;
			}
			set
			{
				if ((this._Bonus != value))
				{
					this.OnBonusChanging(value);
					this.SendPropertyChanging();
					this._Bonus = value;
					this.SendPropertyChanged("Bonus");
					this.OnBonusChanged();
				}
			}
		}
		
		[Column(Storage="_CommissionPct", DbType="SmallMoney NOT NULL")]
		public decimal CommissionPct
		{
			get
			{
				return this._CommissionPct;
			}
			set
			{
				if ((this._CommissionPct != value))
				{
					this.OnCommissionPctChanging(value);
					this.SendPropertyChanging();
					this._CommissionPct = value;
					this.SendPropertyChanged("CommissionPct");
					this.OnCommissionPctChanged();
				}
			}
		}
		
		[Column(Storage="_SalesYTD", DbType="Money NOT NULL")]
		public decimal SalesYTD
		{
			get
			{
				return this._SalesYTD;
			}
			set
			{
				if ((this._SalesYTD != value))
				{
					this.OnSalesYTDChanging(value);
					this.SendPropertyChanging();
					this._SalesYTD = value;
					this.SendPropertyChanged("SalesYTD");
					this.OnSalesYTDChanged();
				}
			}
		}
		
		[Column(Storage="_SalesLastYear", DbType="Money NOT NULL")]
		public decimal SalesLastYear
		{
			get
			{
				return this._SalesLastYear;
			}
			set
			{
				if ((this._SalesLastYear != value))
				{
					this.OnSalesLastYearChanging(value);
					this.SendPropertyChanging();
					this._SalesLastYear = value;
					this.SendPropertyChanged("SalesLastYear");
					this.OnSalesLastYearChanged();
				}
			}
		}
		
		[Column(Storage="_rowguid", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid rowguid
		{
			get
			{
				return this._rowguid;
			}
			set
			{
				if ((this._rowguid != value))
				{
					this.OnrowguidChanging(value);
					this.SendPropertyChanging();
					this._rowguid = value;
					this.SendPropertyChanged("rowguid");
					this.OnrowguidChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Association(Name="SalesPerson_SalesOrderHeader", Storage="_SalesOrderHeaders", OtherKey="SalesPersonID")]
		public EntitySet<SalesOrderHeader> SalesOrderHeaders
		{
			get
			{
				return this._SalesOrderHeaders;
			}
			set
			{
				this._SalesOrderHeaders.Assign(value);
			}
		}
		
		[Association(Name="SalesTerritory_SalesPerson", Storage="_SalesTerritory", ThisKey="TerritoryID", IsForeignKey=true)]
		public SalesTerritory SalesTerritory
		{
			get
			{
				return this._SalesTerritory.Entity;
			}
			set
			{
				SalesTerritory previousValue = this._SalesTerritory.Entity;
				if (((previousValue != value) 
							|| (this._SalesTerritory.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SalesTerritory.Entity = null;
						previousValue.SalesPersons.Remove(this);
					}
					this._SalesTerritory.Entity = value;
					if ((value != null))
					{
						value.SalesPersons.Add(this);
						this._TerritoryID = value.TerritoryID;
					}
					else
					{
						this._TerritoryID = default(Nullable<int>);
					}
					this.SendPropertyChanged("SalesTerritory");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SalesOrderHeaders(SalesOrderHeader entity)
		{
			this.SendPropertyChanging();
			entity.SalesPerson = this;
		}
		
		private void detach_SalesOrderHeaders(SalesOrderHeader entity)
		{
			this.SendPropertyChanging();
			entity.SalesPerson = null;
		}
	}
	
	[Table(Name="Sales.SalesTerritory")]
	public partial class SalesTerritory : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TerritoryID;
		
		private string _Name;
		
		private string _CountryRegionCode;
		
		private string _Group;
		
		private decimal _SalesYTD;
		
		private decimal _SalesLastYear;
		
		private decimal _CostYTD;
		
		private decimal _CostLastYear;
		
		private System.Guid _rowguid;
		
		private System.DateTime _ModifiedDate;
		
		private EntitySet<SalesOrderHeader> _SalesOrderHeaders;
		
		private EntitySet<SalesPerson> _SalesPersons;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTerritoryIDChanging(int value);
    partial void OnTerritoryIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCountryRegionCodeChanging(string value);
    partial void OnCountryRegionCodeChanged();
    partial void OnGroupChanging(string value);
    partial void OnGroupChanged();
    partial void OnSalesYTDChanging(decimal value);
    partial void OnSalesYTDChanged();
    partial void OnSalesLastYearChanging(decimal value);
    partial void OnSalesLastYearChanged();
    partial void OnCostYTDChanging(decimal value);
    partial void OnCostYTDChanged();
    partial void OnCostLastYearChanging(decimal value);
    partial void OnCostLastYearChanged();
    partial void OnrowguidChanging(System.Guid value);
    partial void OnrowguidChanged();
    partial void OnModifiedDateChanging(System.DateTime value);
    partial void OnModifiedDateChanged();
    #endregion
		
		public SalesTerritory()
		{
			this._SalesOrderHeaders = new EntitySet<SalesOrderHeader>(new Action<SalesOrderHeader>(this.attach_SalesOrderHeaders), new Action<SalesOrderHeader>(this.detach_SalesOrderHeaders));
			this._SalesPersons = new EntitySet<SalesPerson>(new Action<SalesPerson>(this.attach_SalesPersons), new Action<SalesPerson>(this.detach_SalesPersons));
			OnCreated();
		}
		
		[Column(Storage="_TerritoryID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TerritoryID
		{
			get
			{
				return this._TerritoryID;
			}
			set
			{
				if ((this._TerritoryID != value))
				{
					this.OnTerritoryIDChanging(value);
					this.SendPropertyChanging();
					this._TerritoryID = value;
					this.SendPropertyChanged("TerritoryID");
					this.OnTerritoryIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_CountryRegionCode", DbType="NVarChar(3) NOT NULL", CanBeNull=false)]
		public string CountryRegionCode
		{
			get
			{
				return this._CountryRegionCode;
			}
			set
			{
				if ((this._CountryRegionCode != value))
				{
					this.OnCountryRegionCodeChanging(value);
					this.SendPropertyChanging();
					this._CountryRegionCode = value;
					this.SendPropertyChanged("CountryRegionCode");
					this.OnCountryRegionCodeChanged();
				}
			}
		}
		
		[Column(Name="[Group]", Storage="_Group", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Group
		{
			get
			{
				return this._Group;
			}
			set
			{
				if ((this._Group != value))
				{
					this.OnGroupChanging(value);
					this.SendPropertyChanging();
					this._Group = value;
					this.SendPropertyChanged("Group");
					this.OnGroupChanged();
				}
			}
		}
		
		[Column(Storage="_SalesYTD", DbType="Money NOT NULL")]
		public decimal SalesYTD
		{
			get
			{
				return this._SalesYTD;
			}
			set
			{
				if ((this._SalesYTD != value))
				{
					this.OnSalesYTDChanging(value);
					this.SendPropertyChanging();
					this._SalesYTD = value;
					this.SendPropertyChanged("SalesYTD");
					this.OnSalesYTDChanged();
				}
			}
		}
		
		[Column(Storage="_SalesLastYear", DbType="Money NOT NULL")]
		public decimal SalesLastYear
		{
			get
			{
				return this._SalesLastYear;
			}
			set
			{
				if ((this._SalesLastYear != value))
				{
					this.OnSalesLastYearChanging(value);
					this.SendPropertyChanging();
					this._SalesLastYear = value;
					this.SendPropertyChanged("SalesLastYear");
					this.OnSalesLastYearChanged();
				}
			}
		}
		
		[Column(Storage="_CostYTD", DbType="Money NOT NULL")]
		public decimal CostYTD
		{
			get
			{
				return this._CostYTD;
			}
			set
			{
				if ((this._CostYTD != value))
				{
					this.OnCostYTDChanging(value);
					this.SendPropertyChanging();
					this._CostYTD = value;
					this.SendPropertyChanged("CostYTD");
					this.OnCostYTDChanged();
				}
			}
		}
		
		[Column(Storage="_CostLastYear", DbType="Money NOT NULL")]
		public decimal CostLastYear
		{
			get
			{
				return this._CostLastYear;
			}
			set
			{
				if ((this._CostLastYear != value))
				{
					this.OnCostLastYearChanging(value);
					this.SendPropertyChanging();
					this._CostLastYear = value;
					this.SendPropertyChanged("CostLastYear");
					this.OnCostLastYearChanged();
				}
			}
		}
		
		[Column(Storage="_rowguid", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid rowguid
		{
			get
			{
				return this._rowguid;
			}
			set
			{
				if ((this._rowguid != value))
				{
					this.OnrowguidChanging(value);
					this.SendPropertyChanging();
					this._rowguid = value;
					this.SendPropertyChanged("rowguid");
					this.OnrowguidChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedDate", DbType="DateTime NOT NULL")]
		public System.DateTime ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[Association(Name="SalesTerritory_SalesOrderHeader", Storage="_SalesOrderHeaders", OtherKey="TerritoryID")]
		public EntitySet<SalesOrderHeader> SalesOrderHeaders
		{
			get
			{
				return this._SalesOrderHeaders;
			}
			set
			{
				this._SalesOrderHeaders.Assign(value);
			}
		}
		
		[Association(Name="SalesTerritory_SalesPerson", Storage="_SalesPersons", OtherKey="TerritoryID")]
		public EntitySet<SalesPerson> SalesPersons
		{
			get
			{
				return this._SalesPersons;
			}
			set
			{
				this._SalesPersons.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SalesOrderHeaders(SalesOrderHeader entity)
		{
			this.SendPropertyChanging();
			entity.SalesTerritory = this;
		}
		
		private void detach_SalesOrderHeaders(SalesOrderHeader entity)
		{
			this.SendPropertyChanging();
			entity.SalesTerritory = null;
		}
		
		private void attach_SalesPersons(SalesPerson entity)
		{
			this.SendPropertyChanging();
			entity.SalesTerritory = this;
		}
		
		private void detach_SalesPersons(SalesPerson entity)
		{
			this.SendPropertyChanging();
			entity.SalesTerritory = null;
		}
	}
}
#pragma warning restore 1591
